
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>    <q-m>---------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>--</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>-- Author: Otto Horvath</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>--</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>--</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>-- Description: ~</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>--</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>--</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a><q-w>library</q-w> ieee                    ;
<a name="13"><q-n>     13  </q-n></a><q-w>use</q-w>     ieee.std_logic_1164.<q-w>all</q-w> ;
<a name="14"><q-n>     14  </q-n></a><q-w>use</q-w>     ieee.numeric_std.<q-w>all</q-w>    ;
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="21"><q-n>     21  </q-n></a><q-w>entity</q-w> config_reg_if_fsm <q-w>is</q-w>
<a name="22"><q-n>     22  </q-n></a>    <q-w>generic</q-w>(
<a name="23"><q-n>     23  </q-n></a>        ACK_NEEDED  :       <q-t>boolean</q-w> :=  false   ;               <q-m>-- Synthesis parameter</q-m>
<a name="24"><q-n>     24  </q-n></a>        DW          :       <q-t>integer</q-w> :=  32      ;               <q-m>-- Proc.-side IF data width</q-m>
<a name="25"><q-n>     25  </q-n></a>        RD_START    :       <q-t>std_logic_vector</q-w>(63 <q-w>downto</q-w> 0);      <q-m>-- Read transaction indicator</q-m>
<a name="26"><q-n>     26  </q-n></a>        WR_START    :       <q-t>std_logic_vector</q-w>(63 <q-w>downto</q-w> 0)       <q-m>-- wr transaction indicator</q-m>
<a name="27"><q-n>     27  </q-n></a>    );
<a name="28"><q-n>     28  </q-n></a>    <q-w>port</q-w>(
<a name="29"><q-n>     29  </q-n></a>        clk         :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="30"><q-n>     30  </q-n></a>        rstn        :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="31"><q-n>     31  </q-n></a>        wr          :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="32"><q-n>     32  </q-n></a>        <q-m>-- coverage off t</q-m>
<a name="33"><q-n>     33  </q-n></a>        wdata       :   <q-a>in</q-w>  <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0);
<a name="34"><q-n>     34  </q-n></a>        <q-m>-- coverage on</q-m>
<a name="35"><q-n>     35  </q-n></a>        ack_from_DUV:   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="36"><q-n>     36  </q-n></a>        rstrb       :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="37"><q-n>     37  </q-n></a>        wstrb       :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="38"><q-n>     38  </q-n></a>        cs          :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="39"><q-n>     39  </q-n></a>        addr_en     :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="40"><q-n>     40  </q-n></a>        wdata_en    :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="41"><q-n>     41  </q-n></a>        rdata_en    :   <q-a>out</q-w> <q-t>std_logic</q-w>
<a name="42"><q-n>     42  </q-n></a>    );
<a name="43"><q-n>     43  </q-n></a><q-w>end</q-w> <q-w>entity</q-w> config_reg_if_fsm;
<a name="44"><q-n>     44  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="45"><q-n>     45  </q-n></a>
<a name="46"><q-n>     46  </q-n></a><q-w>architecture</q-w>    rtl <q-w>of</q-w> config_reg_if_fsm   <q-w>is</q-w>
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>    <q-w>type</q-w>    state_t    <q-w>is</q-w>(
<a name="49"><q-n>     49  </q-n></a>        IDLE            ,
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>        ST_RADDR      ,   <q-m>--</q-m>
<a name="52"><q-n>     52  </q-n></a>        INIT_RD   ,   <q-m>--</q-m>
<a name="53"><q-n>     53  </q-n></a>        EXTD_RD   ,   <q-m>--  States related to a read transaction.</q-m>
<a name="54"><q-n>     54  </q-n></a>        WAIT_RACK ,   <q-m>--</q-m>
<a name="55"><q-n>     55  </q-n></a>        CAPT_RDATA ,   <q-m>--</q-m>
<a name="56"><q-n>     56  </q-n></a>
<a name="57"><q-n>     57  </q-n></a>        ST_WADDR      ,   <q-m>--</q-m>
<a name="58"><q-n>     58  </q-n></a>        ST_WDATA      ,   <q-m>--</q-m>
<a name="59"><q-n>     59  </q-n></a>        INIT_WR   ,   <q-m>--  States related to a wr transaction.</q-m>
<a name="60"><q-n>     60  </q-n></a>        GEN_WR    ,   <q-m>--</q-m>
<a name="61"><q-n>     61  </q-n></a>        EXTD_WR   ,   <q-m>--</q-m>
<a name="62"><q-n>     62  </q-n></a>        WAIT_WACK     <q-m>--</q-m>
<a name="63"><q-n>     63  </q-n></a>    );
<a name="64"><q-n>     64  </q-n></a>    <q-w>signal</q-w>  cur_state           :   state_t;
<a name="65"><q-n>     65  </q-n></a>    <q-w>signal</q-w>  nxt_state           :   state_t;
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a><q-w>begin</q-w>
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a>    L_FSM:  <q-w>block</q-w>
<a name="70"><q-n>     70  </q-n></a>    <q-w>begin</q-w>
<a name="71"><q-n>     71  </q-n></a>
<a name="72"><q-n>     72  </q-n></a>        <q-m>----------------------------------------------------------------------</q-m>
<a name="73"><q-n>     73  </q-n></a>        L_NEXT_STATE:   <q-w>process</q-w>(cur_state,wr,wdata,ack_from_DUV) <q-w>is</q-w>
<a name="74"><q-n>     74  </q-n></a>        <q-w>begin</q-w>
<a name="75"><q-n>     75  </q-n></a>
<a name="76"><q-n>     76  </q-n></a>            nxt_state   &lt;= cur_state;
<a name="77"><q-n>     77  </q-n></a>
<a name="78"><q-n>     78  </q-n></a>            <q-w>case</q-w>(cur_state) <q-w>is</q-w>
<a name="79"><q-n>     79  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="80"><q-n>     80  </q-n></a>                <q-w>when</q-w> IDLE           =&gt;  <q-w>if</q-w>(wr = '1' <q-w>and</q-w> wdata = <q-t>std_logic_vector</q-w>(resize(<q-t>signed</q-w>(RD_START), DW)) ) <q-w>then</q-w>
<a name="81"><q-n>     81  </q-n></a>                                            nxt_state   &lt;=  ST_RADDR;         <q-m>-- Read indicator</q-m>
<a name="82"><q-n>     82  </q-n></a>                                        <q-w>end</q-w> <q-w>if</q-w>;
<a name="83"><q-n>     83  </q-n></a>                                        <q-w>if</q-w>(wr = '1' <q-w>and</q-w> wdata = <q-t>std_logic_vector</q-w>(resize(<q-t>signed</q-w>(WR_START), DW)) ) <q-w>then</q-w>
<a name="84"><q-n>     84  </q-n></a>                                            nxt_state   &lt;=  ST_WADDR;         <q-m>-- Write indicator</q-m>
<a name="85"><q-n>     85  </q-n></a>                                        <q-w>end</q-w> <q-w>if</q-w>;
<a name="86"><q-n>     86  </q-n></a>                <q-m>--===================================================</q-m>
<a name="87"><q-n>     87  </q-n></a>
<a name="88"><q-n>     88  </q-n></a>
<a name="89"><q-n>     89  </q-n></a>
<a name="90"><q-n>     90  </q-n></a>                <q-m>--===================================================--</q-m>
<a name="91"><q-n>     91  </q-n></a>                <q-w>when</q-w> ST_RADDR   =&gt;  <q-w>if</q-w>(wr = '1')    <q-w>then</q-w>             <q-m>--</q-m>
<a name="92"><q-n>     92  </q-n></a>                                        nxt_state   &lt;= INIT_RD;      <q-m>--</q-m>
<a name="93"><q-n>     93  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="94"><q-n>     94  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="95"><q-n>     95  </q-n></a>                <q-w>when</q-w> INIT_RD    =&gt;  <q-w>if</q-w>(ACK_NEEDED)  <q-w>then</q-w>             <q-m>--</q-m>
<a name="96"><q-n>     96  </q-n></a>                                        nxt_state   &lt;= WAIT_RACK;    <q-m>--</q-m>
<a name="97"><q-n>     97  </q-n></a>                                    <q-w>else</q-w>                             <q-m>--</q-m>
<a name="98"><q-n>     98  </q-n></a>                                        nxt_state   &lt;= CAPT_RDATA;   <q-m>--</q-m>
<a name="99"><q-n>     99  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>-- Read-related signals</q-m>
<a name="100"><q-n>     100  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="101"><q-n>     101  </q-n></a>                <q-w>when</q-w> WAIT_RACK  =&gt;  <q-w>if</q-w>(ack_from_DUV = '1')  <q-w>then</q-w>     <q-m>--</q-m>
<a name="102"><q-n>     102  </q-n></a>                                        nxt_state   &lt;= EXTD_RD;      <q-m>--</q-m>
<a name="103"><q-n>     103  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="104"><q-n>     104  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="105"><q-n>     105  </q-n></a>                <q-w>when</q-w> EXTD_RD    =&gt;  <q-w>if</q-w>(ack_from_DUV = '1')  <q-w>then</q-w>     <q-m>--</q-m>
<a name="106"><q-n>     106  </q-n></a>                                        nxt_state   &lt;= CAPT_RDATA;   <q-m>--</q-m>
<a name="107"><q-n>     107  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="108"><q-n>     108  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="109"><q-n>     109  </q-n></a>                <q-w>when</q-w> CAPT_RDATA =&gt;  nxt_state       &lt;= IDLE;         <q-m>--</q-m>
<a name="110"><q-n>     110  </q-n></a>                <q-m>--===================================================--</q-m>
<a name="111"><q-n>     111  </q-n></a>
<a name="112"><q-n>     112  </q-n></a>
<a name="113"><q-n>     113  </q-n></a>                <q-m>--===================================================--</q-m>
<a name="114"><q-n>     114  </q-n></a>                <q-w>when</q-w> ST_WADDR   =&gt;  <q-w>if</q-w>(wr = '1')    <q-w>then</q-w>             <q-m>--</q-m>
<a name="115"><q-n>     115  </q-n></a>                                        nxt_state   &lt;=  ST_WDATA;    <q-m>--</q-m>
<a name="116"><q-n>     116  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="117"><q-n>     117  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="118"><q-n>     118  </q-n></a>                <q-w>when</q-w> ST_WDATA   =&gt;  <q-w>if</q-w>(wr = '1')    <q-w>then</q-w>             <q-m>--</q-m>
<a name="119"><q-n>     119  </q-n></a>                                        nxt_state   &lt;=  INIT_WR;     <q-m>--</q-m>
<a name="120"><q-n>     120  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="121"><q-n>     121  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="122"><q-n>     122  </q-n></a>                <q-w>when</q-w> INIT_WR    =&gt;  <q-w>if</q-w>(ACK_NEEDED)  <q-w>then</q-w>             <q-m>--</q-m>
<a name="123"><q-n>     123  </q-n></a>                                        nxt_state   &lt;=  WAIT_WACK;   <q-m>--</q-m>
<a name="124"><q-n>     124  </q-n></a>                                    <q-w>else</q-w>                             <q-m>--</q-m>
<a name="125"><q-n>     125  </q-n></a>                                        nxt_state   &lt;=  GEN_WR;      <q-m>--</q-m>
<a name="126"><q-n>     126  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>-- Write-related signals</q-m>
<a name="127"><q-n>     127  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="128"><q-n>     128  </q-n></a>                <q-w>when</q-w> WAIT_WACK  =&gt;  <q-w>if</q-w>(ack_from_DUV = '1')  <q-w>then</q-w>     <q-m>--</q-m>
<a name="129"><q-n>     129  </q-n></a>                                        nxt_state   &lt;=  EXTD_WR;     <q-m>--</q-m>
<a name="130"><q-n>     130  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="131"><q-n>     131  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="132"><q-n>     132  </q-n></a>                <q-w>when</q-w> GEN_WR     =&gt;  nxt_state   &lt;= IDLE;             <q-m>--</q-m>
<a name="133"><q-n>     133  </q-n></a>                <q-m>-------------------------------------------------------</q-m>
<a name="134"><q-n>     134  </q-n></a>                <q-w>when</q-w> EXTD_WR    =&gt;  <q-w>if</q-w>(ack_from_DUV = '1')  <q-w>then</q-w>     <q-m>--</q-m>
<a name="135"><q-n>     135  </q-n></a>                                        nxt_state   &lt;= IDLE;         <q-m>--</q-m>
<a name="136"><q-n>     136  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;                          <q-m>--</q-m>
<a name="137"><q-n>     137  </q-n></a>                <q-m>--===================================================--</q-m>
<a name="138"><q-n>     138  </q-n></a>
<a name="139"><q-n>     139  </q-n></a>
<a name="140"><q-n>     140  </q-n></a>
<a name="141"><q-n>     141  </q-n></a>                <q-m>--===================================================</q-m>
<a name="142"><q-n>     142  </q-n></a>
<a name="143"><q-n>     143  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="144"><q-n>     144  </q-n></a>                <q-m>-- coverage off</q-m>
<a name="145"><q-n>     145  </q-n></a>                <q-w>when</q-w> <q-w>others</q-w> =&gt;  nxt_state   &lt;= IDLE;
<a name="146"><q-n>     146  </q-n></a>                <q-m>-- coverage on</q-m>
<a name="147"><q-n>     147  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="148"><q-n>     148  </q-n></a>            <q-w>end</q-w> <q-w>case</q-w>;
<a name="149"><q-n>     149  </q-n></a>        <q-w>end</q-w> <q-w>process</q-w>;
<a name="150"><q-n>     150  </q-n></a>        <q-m>----------------------------------------------------------------------</q-m>
<a name="151"><q-n>     151  </q-n></a>
<a name="152"><q-n>     152  </q-n></a>
<a name="153"><q-n>     153  </q-n></a>
<a name="154"><q-n>     154  </q-n></a>        <q-m>-- FSM outputs</q-m>
<a name="155"><q-n>     155  </q-n></a>        L_NO_ACK: <q-w>if</q-w>(ACK_NEEDED = false)  <q-w>generate</q-w>
<a name="156"><q-n>     156  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="157"><q-n>     157  </q-n></a>            cs      &lt;=  '1' <q-w>when</q-w>( cur_state = INIT_RD       <q-w>or</q-w>
<a name="158"><q-n>     158  </q-n></a>                                  cur_state = CAPT_RDATA    <q-w>or</q-w>
<a name="159"><q-n>     159  </q-n></a>
<a name="160"><q-n>     160  </q-n></a>                                  cur_state = INIT_WR       <q-w>or</q-w>
<a name="161"><q-n>     161  </q-n></a>                                  cur_state = GEN_WR
<a name="162"><q-n>     162  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="163"><q-n>     163  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="164"><q-n>     164  </q-n></a>            rstrb   &lt;=  '1' <q-w>when</q-w>( cur_state = CAPT_RDATA
<a name="165"><q-n>     165  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="166"><q-n>     166  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="167"><q-n>     167  </q-n></a>            wstrb   &lt;=  '1' <q-w>when</q-w>( cur_state = GEN_WR
<a name="168"><q-n>     168  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="169"><q-n>     169  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="170"><q-n>     170  </q-n></a>            addr_en &lt;=  '1' <q-w>when</q-w>( cur_state = ST_RADDR      <q-w>or</q-w>
<a name="171"><q-n>     171  </q-n></a>                                  cur_state = ST_WADDR
<a name="172"><q-n>     172  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="173"><q-n>     173  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="174"><q-n>     174  </q-n></a>            wdata_en&lt;=  '1' <q-w>when</q-w>( cur_state = ST_WDATA
<a name="175"><q-n>     175  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="176"><q-n>     176  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="177"><q-n>     177  </q-n></a>            rdata_en&lt;=  '1' <q-w>when</q-w>( cur_state = CAPT_RDATA
<a name="178"><q-n>     178  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="179"><q-n>     179  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="180"><q-n>     180  </q-n></a>        <q-w>end</q-w> <q-w>generate</q-w>;
<a name="181"><q-n>     181  </q-n></a>
<a name="182"><q-n>     182  </q-n></a>        <q-m>-- FSM outputs</q-m>
<a name="183"><q-n>     183  </q-n></a>        L_ACK: <q-w>if</q-w>(ACK_NEEDED = true)  <q-w>generate</q-w>
<a name="184"><q-n>     184  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="185"><q-n>     185  </q-n></a>            cs      &lt;=  '1' <q-w>when</q-w>( cur_state = INIT_RD       <q-w>or</q-w>
<a name="186"><q-n>     186  </q-n></a>                                  cur_state = CAPT_RDATA    <q-w>or</q-w>
<a name="187"><q-n>     187  </q-n></a>                                  cur_state = WAIT_RACK     <q-w>or</q-w>
<a name="188"><q-n>     188  </q-n></a>                                  cur_state = EXTD_RD       <q-w>or</q-w>
<a name="189"><q-n>     189  </q-n></a>
<a name="190"><q-n>     190  </q-n></a>                                  cur_state = INIT_WR       <q-w>or</q-w>
<a name="191"><q-n>     191  </q-n></a>                                  cur_state = GEN_WR        <q-w>or</q-w>
<a name="192"><q-n>     192  </q-n></a>                                  cur_state = WAIT_WACK     <q-w>or</q-w>
<a name="193"><q-n>     193  </q-n></a>                                  cur_state = EXTD_WR
<a name="194"><q-n>     194  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="195"><q-n>     195  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="196"><q-n>     196  </q-n></a>            rstrb   &lt;=  '1' <q-w>when</q-w>( cur_state = CAPT_RDATA    <q-w>or</q-w>
<a name="197"><q-n>     197  </q-n></a>                                  cur_state = EXTD_RD
<a name="198"><q-n>     198  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="199"><q-n>     199  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="200"><q-n>     200  </q-n></a>            wstrb   &lt;=  '1' <q-w>when</q-w>( cur_state = GEN_WR        <q-w>or</q-w>
<a name="201"><q-n>     201  </q-n></a>                                  cur_state = EXTD_WR
<a name="202"><q-n>     202  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="203"><q-n>     203  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="204"><q-n>     204  </q-n></a>            addr_en &lt;=  '1' <q-w>when</q-w>( cur_state = ST_RADDR      <q-w>or</q-w>
<a name="205"><q-n>     205  </q-n></a>                                  cur_state = ST_WADDR
<a name="206"><q-n>     206  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="207"><q-n>     207  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="208"><q-n>     208  </q-n></a>            wdata_en&lt;=  '1' <q-w>when</q-w>( cur_state = ST_WDATA
<a name="209"><q-n>     209  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="210"><q-n>     210  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="211"><q-n>     211  </q-n></a>            rdata_en&lt;=  '1' <q-w>when</q-w>( cur_state = CAPT_RDATA
<a name="212"><q-n>     212  </q-n></a>                                ) <q-w>else</q-w> '0';
<a name="213"><q-n>     213  </q-n></a>            <q-m>--------------------------------------------------</q-m>
<a name="214"><q-n>     214  </q-n></a>        <q-w>end</q-w> <q-w>generate</q-w>;
<a name="215"><q-n>     215  </q-n></a>
<a name="216"><q-n>     216  </q-n></a>
<a name="217"><q-n>     217  </q-n></a>        <q-m>-----------------------------------------------------</q-m>
<a name="218"><q-n>     218  </q-n></a>        L_STATE:    <q-w>process</q-w>(clk,rstn)   <q-w>is</q-w>
<a name="219"><q-n>     219  </q-n></a>        <q-w>begin</q-w>
<a name="220"><q-n>     220  </q-n></a>            <q-w>if</q-w>(rstn = '0')  <q-w>then</q-w>
<a name="221"><q-n>     221  </q-n></a>                cur_state  &lt;= IDLE;
<a name="222"><q-n>     222  </q-n></a>
<a name="223"><q-n>     223  </q-n></a>            <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="224"><q-n>     224  </q-n></a>                cur_state  &lt;= nxt_state;
<a name="225"><q-n>     225  </q-n></a>
<a name="226"><q-n>     226  </q-n></a>            <q-w>end</q-w> <q-w>if</q-w>;
<a name="227"><q-n>     227  </q-n></a>        <q-w>end</q-w> <q-w>process</q-w>;
<a name="228"><q-n>     228  </q-n></a>        <q-m>-----------------------------------------------------</q-m>
<a name="229"><q-n>     229  </q-n></a>    <q-w>end</q-w> <q-w>block</q-w>;
<a name="230"><q-n>     230  </q-n></a>
<a name="231"><q-n>     231  </q-n></a><q-w>end</q-w> <q-w>architecture</q-w>;</tt>
</pre>

  
</body>
</html>
