
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>    <q-m>---------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>--</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>-- Author: Otto Horvath</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>--</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>--</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>-- Description: ~</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>--</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>--</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a><q-w>library</q-w> ieee                    ;
<a name="13"><q-n>     13  </q-n></a><q-w>use</q-w>     ieee.std_logic_1164.<q-w>all</q-w> ;
<a name="14"><q-n>     14  </q-n></a><q-w>use</q-w>     ieee.numeric_std.<q-w>all</q-w>    ;
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="21"><q-n>     21  </q-n></a><q-w>entity</q-w> fifo_wr_if_fsm <q-w>is</q-w>
<a name="22"><q-n>     22  </q-n></a><q-m>--    generic(</q-m>
<a name="23"><q-n>     23  </q-n></a><q-m>--        DW          :       integer :=  32  -- Data width</q-m>
<a name="24"><q-n>     24  </q-n></a><q-m>--    );</q-m>
<a name="25"><q-n>     25  </q-n></a>    <q-w>port</q-w>(
<a name="26"><q-n>     26  </q-n></a>        clk             :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="27"><q-n>     27  </q-n></a>        rstn            :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="28"><q-n>     28  </q-n></a>        trig_in_fsm     :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="29"><q-n>     29  </q-n></a>        wr              :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="30"><q-n>     30  </q-n></a>        wdata           :   <q-a>in</q-w>  <q-t>std_logic_vector</q-w>(2 <q-w>downto</q-w> 0);
<a name="31"><q-n>     31  </q-n></a>        fifo_wr         :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="32"><q-n>     32  </q-n></a>        show_data_fsm   :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="33"><q-n>     33  </q-n></a>        rdata_reg_en    :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="34"><q-n>     34  </q-n></a>        full            :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="35"><q-n>     35  </q-n></a>        rcvd_data_fsm   :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="36"><q-n>     36  </q-n></a>        enabled_fsm     :   <q-a>out</q-w> <q-t>std_logic</q-w>
<a name="37"><q-n>     37  </q-n></a>    );
<a name="38"><q-n>     38  </q-n></a><q-w>end</q-w> <q-w>entity</q-w> fifo_wr_if_fsm;
<a name="39"><q-n>     39  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="40"><q-n>     40  </q-n></a>
<a name="41"><q-n>     41  </q-n></a><q-w>architecture</q-w>    rtl <q-w>of</q-w> fifo_wr_if_fsm   <q-w>is</q-w>
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>    <q-w>type</q-w>    state_t <q-w>is</q-w>(
<a name="44"><q-n>     44  </q-n></a>        IDLE     ,
<a name="45"><q-n>     45  </q-n></a>        ENABLED  ,
<a name="46"><q-n>     46  </q-n></a>        RCVD_DATA,
<a name="47"><q-n>     47  </q-n></a>        SHOW_DATA
<a name="48"><q-n>     48  </q-n></a>    );
<a name="49"><q-n>     49  </q-n></a>    <q-w>signal</q-w>  cur_state   :   state_t;
<a name="50"><q-n>     50  </q-n></a>    <q-w>signal</q-w>  nxt_state   :   state_t;
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a><q-w>begin</q-w>
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a>    L_FSM:  <q-w>block</q-w>
<a name="55"><q-n>     55  </q-n></a>    <q-w>begin</q-w>
<a name="56"><q-n>     56  </q-n></a>
<a name="57"><q-n>     57  </q-n></a>        <q-m>----------------------------------------------------------------------</q-m>
<a name="58"><q-n>     58  </q-n></a>        L_NEXT_STATE:   <q-w>process</q-w>(cur_state,wr,wdata,fifo_wr,trig_in_fsm) <q-w>is</q-w>
<a name="59"><q-n>     59  </q-n></a>        <q-w>begin</q-w>
<a name="60"><q-n>     60  </q-n></a>
<a name="61"><q-n>     61  </q-n></a>            nxt_state   &lt;= cur_state;
<a name="62"><q-n>     62  </q-n></a>
<a name="63"><q-n>     63  </q-n></a>            <q-w>case</q-w>(cur_state) <q-w>is</q-w>
<a name="64"><q-n>     64  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="65"><q-n>     65  </q-n></a>                <q-w>when</q-w> IDLE       =&gt;  <q-w>if</q-w>( (wdata(2 <q-w>downto</q-w> 0) = b<q-l>"001"</q-l> <q-w>and</q-w> wr='1') <q-w>or</q-w>
<a name="66"><q-n>     66  </q-n></a>                                        (trig_in_fsm = '1')
<a name="67"><q-n>     67  </q-n></a>                                      )  <q-w>then</q-w>
<a name="68"><q-n>     68  </q-n></a>                                        nxt_state   &lt;= ENABLED;
<a name="69"><q-n>     69  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="70"><q-n>     70  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="71"><q-n>     71  </q-n></a>                <q-m>-- Clearing has prioprity</q-m>
<a name="72"><q-n>     72  </q-n></a>                <q-w>when</q-w> ENABLED    =&gt;  <q-w>if</q-w>( wdata(2 <q-w>downto</q-w> 0) = b<q-l>"010"</q-l> <q-w>and</q-w> wr='1' ) <q-w>then</q-w>
<a name="73"><q-n>     73  </q-n></a>                                        nxt_state   &lt;= IDLE;
<a name="74"><q-n>     74  </q-n></a>                                    <q-w>elsif</q-w>( fifo_wr = '1')           <q-w>then</q-w>
<a name="75"><q-n>     75  </q-n></a>                                        nxt_state   &lt;= RCVD_DATA;
<a name="76"><q-n>     76  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="77"><q-n>     77  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="78"><q-n>     78  </q-n></a>                <q-m>-- Clearing has prioprity</q-m>
<a name="79"><q-n>     79  </q-n></a>                <q-w>when</q-w> RCVD_DATA  =&gt;  <q-w>if</q-w>( wdata(2 <q-w>downto</q-w> 0) = b<q-l>"010"</q-l> <q-w>and</q-w> wr='1' ) <q-w>then</q-w>
<a name="80"><q-n>     80  </q-n></a>                                        nxt_state   &lt;= IDLE;
<a name="81"><q-n>     81  </q-n></a>                                    <q-w>elsif</q-w>( wdata(2 <q-w>downto</q-w> 0) = b<q-l>"100"</q-l> <q-w>and</q-w> wr='1' ) <q-w>then</q-w>
<a name="82"><q-n>     82  </q-n></a>                                        nxt_state   &lt;= SHOW_DATA;
<a name="83"><q-n>     83  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="84"><q-n>     84  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="85"><q-n>     85  </q-n></a>                <q-m>-- Clearing has prioprity</q-m>
<a name="86"><q-n>     86  </q-n></a>                <q-m>-- Could be useful to be able to send back to enabled immediately</q-m>
<a name="87"><q-n>     87  </q-n></a>                <q-w>when</q-w> SHOW_DATA  =&gt;  <q-w>if</q-w>( wdata(2 <q-w>downto</q-w> 0) = <q-l>"010"</q-l> <q-w>and</q-w> wr='1' )   <q-w>then</q-w>
<a name="88"><q-n>     88  </q-n></a>                                        nxt_state   &lt;= IDLE;
<a name="89"><q-n>     89  </q-n></a>                                    <q-w>elsif</q-w>(  (wdata(2 <q-w>downto</q-w> 0) = b<q-l>"001"</q-l> <q-w>and</q-w> wr='1')
<a name="90"><q-n>     90  </q-n></a>                                    ) <q-w>then</q-w>
<a name="91"><q-n>     91  </q-n></a>                                        nxt_state   &lt;= ENABLED;
<a name="92"><q-n>     92  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="93"><q-n>     93  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="94"><q-n>     94  </q-n></a>                <q-m>-- coverage off</q-m>
<a name="95"><q-n>     95  </q-n></a>                <q-w>when</q-w> <q-w>others</q-w> =&gt;  nxt_state   &lt;= IDLE;
<a name="96"><q-n>     96  </q-n></a>                <q-m>-- coverage on</q-m>
<a name="97"><q-n>     97  </q-n></a>                <q-m>-----------------------------------------------------</q-m>
<a name="98"><q-n>     98  </q-n></a>            <q-w>end</q-w> <q-w>case</q-w>;
<a name="99"><q-n>     99  </q-n></a>        <q-w>end</q-w> <q-w>process</q-w>;
<a name="100"><q-n>     100  </q-n></a>        <q-m>----------------------------------------------------------------------</q-m>
<a name="101"><q-n>     101  </q-n></a>
<a name="102"><q-n>     102  </q-n></a>        <q-m>-- FSM outputs</q-m>
<a name="103"><q-n>     103  </q-n></a>        show_data_fsm   &lt;=  '1' <q-w>when</q-w>( cur_state = SHOW_DATA
<a name="104"><q-n>     104  </q-n></a>                                    ) <q-w>else</q-w> '0';
<a name="105"><q-n>     105  </q-n></a>        <q-m>-------------------------------------------------------------</q-m>
<a name="106"><q-n>     106  </q-n></a>        full            &lt;=  '1' <q-w>when</q-w>( cur_state = RCVD_DATA <q-w>or</q-w>
<a name="107"><q-n>     107  </q-n></a>                                      cur_state = SHOW_DATA <q-w>or</q-w>
<a name="108"><q-n>     108  </q-n></a>                                      cur_state = IDLE  <q-m>-- Right after reset, it should be full to block writes, because</q-m>
<a name="109"><q-n>     109  </q-n></a>                                                        <q-m>--</q-m>
<a name="110"><q-n>     110  </q-n></a>                                    ) <q-w>else</q-w> '0';
<a name="111"><q-n>     111  </q-n></a>        <q-m>-------------------------------------------------------------</q-m>
<a name="112"><q-n>     112  </q-n></a>        rcvd_data_fsm   &lt;=  '1' <q-w>when</q-w>( cur_state = RCVD_DATA
<a name="113"><q-n>     113  </q-n></a>                                    ) <q-w>else</q-w> '0';
<a name="114"><q-n>     114  </q-n></a>        <q-m>-------------------------------------------------------------</q-m>
<a name="115"><q-n>     115  </q-n></a>        enabled_fsm     &lt;=  '1' <q-w>when</q-w>( cur_state /= IDLE
<a name="116"><q-n>     116  </q-n></a>                                    ) <q-w>else</q-w> '0';
<a name="117"><q-n>     117  </q-n></a>        <q-m>-------------------------------------------------------------</q-m>
<a name="118"><q-n>     118  </q-n></a>        rdata_reg_en    &lt;=  '1' <q-w>when</q-w>( (cur_state = ENABLED) <q-w>and</q-w> (fifo_wr = '1')
<a name="119"><q-n>     119  </q-n></a>                                    ) <q-w>else</q-w> '0';
<a name="120"><q-n>     120  </q-n></a>
<a name="121"><q-n>     121  </q-n></a>
<a name="122"><q-n>     122  </q-n></a>
<a name="123"><q-n>     123  </q-n></a>        <q-m>-----------------------------------------------------</q-m>
<a name="124"><q-n>     124  </q-n></a>        L_STATE:    <q-w>process</q-w>(clk,rstn)   <q-w>is</q-w>
<a name="125"><q-n>     125  </q-n></a>        <q-w>begin</q-w>
<a name="126"><q-n>     126  </q-n></a>            <q-w>if</q-w>(rstn = '0')  <q-w>then</q-w>
<a name="127"><q-n>     127  </q-n></a>                cur_state  &lt;= IDLE;
<a name="128"><q-n>     128  </q-n></a>
<a name="129"><q-n>     129  </q-n></a>            <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="130"><q-n>     130  </q-n></a>                cur_state  &lt;= nxt_state;
<a name="131"><q-n>     131  </q-n></a>
<a name="132"><q-n>     132  </q-n></a>            <q-w>end</q-w> <q-w>if</q-w>;
<a name="133"><q-n>     133  </q-n></a>        <q-w>end</q-w> <q-w>process</q-w>;
<a name="134"><q-n>     134  </q-n></a>        <q-m>-----------------------------------------------------</q-m>
<a name="135"><q-n>     135  </q-n></a>    <q-w>end</q-w> <q-w>block</q-w>;
<a name="136"><q-n>     136  </q-n></a>
<a name="137"><q-n>     137  </q-n></a><q-w>end</q-w> <q-w>architecture</q-w>;</tt>
</pre>

  
</body>
</html>
