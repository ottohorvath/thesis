
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>--</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>-- Author: Otto Horvath</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>--</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>--</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>-- Description: ~ This module is responsible for providing reset signal for</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>--                the whole verification environment.</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>--</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a><q-w>library</q-w> ieee                    ;
<a name="13"><q-n>     13  </q-n></a><q-w>use</q-w>     ieee.std_logic_1164.<q-w>all</q-w> ;
<a name="14"><q-n>     14  </q-n></a><q-w>use</q-w>     ieee.numeric_std.<q-w>all</q-w>    ;
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>
<a name="17"><q-n>     17  </q-n></a>
<a name="18"><q-n>     18  </q-n></a>
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="21"><q-n>     21  </q-n></a><q-w>entity</q-w> rstn_gen <q-w>is</q-w>
<a name="22"><q-n>     22  </q-n></a>    <q-w>generic</q-w>(
<a name="23"><q-n>     23  </q-n></a>        REG_LAYER       :       <q-t>boolean</q-w>     :=  false  <q-m>-- For timing closure purposes</q-m>
<a name="24"><q-n>     24  </q-n></a>    );
<a name="25"><q-n>     25  </q-n></a>    <q-w>port</q-w>(
<a name="26"><q-n>     26  </q-n></a>        clk         :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="27"><q-n>     27  </q-n></a>        rstn        :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="28"><q-n>     28  </q-n></a>
<a name="29"><q-n>     29  </q-n></a>        wr          :   <q-a>in</q-w>  <q-t>std_logic</q-w>;
<a name="30"><q-n>     30  </q-n></a>        wdata       :   <q-a>in</q-w>  <q-t>std_logic_vector</q-w>(1  <q-w>downto</q-w>  0);
<a name="31"><q-n>     31  </q-n></a>        rdata       :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="32"><q-n>     32  </q-n></a>        trig_out    :   <q-a>out</q-w> <q-t>std_logic</q-w>;
<a name="33"><q-n>     33  </q-n></a>
<a name="34"><q-n>     34  </q-n></a>        rstn_to_DUV  :   <q-a>out</q-w> <q-t>std_logic</q-w>
<a name="35"><q-n>     35  </q-n></a>    );
<a name="36"><q-n>     36  </q-n></a><q-w>end</q-w> <q-w>entity</q-w> rstn_gen;
<a name="37"><q-n>     37  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>
<a name="40"><q-n>     40  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="41"><q-n>     41  </q-n></a><q-w>architecture</q-w> rtl <q-w>of</q-w> rstn_gen <q-w>is</q-w>
<a name="42"><q-n>     42  </q-n></a>
<a name="43"><q-n>     43  </q-n></a>    <q-m>-- Write Data register</q-m>
<a name="44"><q-n>     44  </q-n></a>    <q-m>-- ===================</q-m>
<a name="45"><q-n>     45  </q-n></a>    <q-w>signal</q-w>  wdata_reg   :   <q-t>std_logic_vector</q-w>(1 <q-w>downto</q-w> 0);
<a name="46"><q-n>     46  </q-n></a>
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>    <q-m>-- Write signal flop for one cycle delay</q-m>
<a name="49"><q-n>     49  </q-n></a>    <q-m>-- =====================================</q-m>
<a name="50"><q-n>     50  </q-n></a>    <q-w>signal</q-w>  wr_reg      :   <q-t>std_logic</q-w>;
<a name="51"><q-n>     51  </q-n></a>
<a name="52"><q-n>     52  </q-n></a>
<a name="53"><q-n>     53  </q-n></a>    <q-m>-- Reset generating flop</q-m>
<a name="54"><q-n>     54  </q-n></a>    <q-m>-- =====================</q-m>
<a name="55"><q-n>     55  </q-n></a>    <q-w>signal</q-w>  rstn_reg    :   <q-t>std_logic</q-w>;
<a name="56"><q-n>     56  </q-n></a>    <q-w>signal</q-w>  rstn_reg_nxt:   <q-t>std_logic</q-w>;
<a name="57"><q-n>     57  </q-n></a>
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>    <q-m>-- Rising-edge detector</q-m>
<a name="60"><q-n>     60  </q-n></a>    <q-m>-- ====================</q-m>
<a name="61"><q-n>     61  </q-n></a>    <q-w>signal</q-w> re_det_reg   :   <q-t>std_logic</q-w>;
<a name="62"><q-n>     62  </q-n></a>    <q-w>signal</q-w> re_det_out   :   <q-t>std_logic</q-w>;
<a name="63"><q-n>     63  </q-n></a>
<a name="64"><q-n>     64  </q-n></a>
<a name="65"><q-n>     65  </q-n></a>    <q-m>-- SC FF</q-m>
<a name="66"><q-n>     66  </q-n></a>    <q-m>-- =====</q-m>
<a name="67"><q-n>     67  </q-n></a>    <q-w>signal</q-w>  sc_ff_out   :   <q-t>std_logic</q-w>;
<a name="68"><q-n>     68  </q-n></a>
<a name="69"><q-n>     69  </q-n></a>
<a name="70"><q-n>     70  </q-n></a>    <q-m>-- Trigger output signals</q-m>
<a name="71"><q-n>     71  </q-n></a>    <q-m>-- ======================</q-m>
<a name="72"><q-n>     72  </q-n></a>    <q-w>signal</q-w>  trig_out_reg:   <q-t>std_logic</q-w>;
<a name="73"><q-n>     73  </q-n></a>
<a name="74"><q-n>     74  </q-n></a>
<a name="75"><q-n>     75  </q-n></a><q-w>begin</q-w>
<a name="76"><q-n>     76  </q-n></a>
<a name="77"><q-n>     77  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="78"><q-n>     78  </q-n></a>    <q-m>-- Feeding the 'wr' input to a flop</q-m>
<a name="79"><q-n>     79  </q-n></a>    L_WR:   <q-w>block</q-w>
<a name="80"><q-n>     80  </q-n></a>            <q-w>begin</q-w>
<a name="81"><q-n>     81  </q-n></a>                <q-w>process</q-w>(clk,rstn) <q-w>is</q-w>
<a name="82"><q-n>     82  </q-n></a>                <q-w>begin</q-w>
<a name="83"><q-n>     83  </q-n></a>                    <q-w>if</q-w>(rstn='0')    <q-w>then</q-w>
<a name="84"><q-n>     84  </q-n></a>                        wr_reg   &lt;= '0';
<a name="85"><q-n>     85  </q-n></a>                    <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="86"><q-n>     86  </q-n></a>                        wr_reg   &lt;= wr;
<a name="87"><q-n>     87  </q-n></a>                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="88"><q-n>     88  </q-n></a>                <q-w>end</q-w> <q-w>process</q-w>;
<a name="89"><q-n>     89  </q-n></a>            <q-w>end</q-w> <q-w>block</q-w>;
<a name="90"><q-n>     90  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="91"><q-n>     91  </q-n></a>    L_WDATA:    <q-w>block</q-w>
<a name="92"><q-n>     92  </q-n></a>                <q-w>begin</q-w>
<a name="93"><q-n>     93  </q-n></a>                    <q-w>process</q-w>(clk,rstn)  <q-w>is</q-w>
<a name="94"><q-n>     94  </q-n></a>                    <q-w>begin</q-w>
<a name="95"><q-n>     95  </q-n></a>                        <q-w>if</q-w>(rstn = '0')  <q-w>then</q-w>
<a name="96"><q-n>     96  </q-n></a>                            wdata_reg &lt;= (<q-w>others</q-w> =&gt; '0');
<a name="97"><q-n>     97  </q-n></a>                        <q-w>elsif</q-w>( rising_edge(clk) )   <q-w>then</q-w>
<a name="98"><q-n>     98  </q-n></a>
<a name="99"><q-n>     99  </q-n></a>                            <q-w>if</q-w>(wr = '1')    <q-w>then</q-w>
<a name="100"><q-n>     100  </q-n></a>                                wdata_reg   &lt;= wdata;
<a name="101"><q-n>     101  </q-n></a>                            <q-w>end</q-w> <q-w>if</q-w>;
<a name="102"><q-n>     102  </q-n></a>
<a name="103"><q-n>     103  </q-n></a>                        <q-w>end</q-w> <q-w>if</q-w>;
<a name="104"><q-n>     104  </q-n></a>                    <q-w>end</q-w> <q-w>process</q-w>;
<a name="105"><q-n>     105  </q-n></a>                <q-w>end</q-w> <q-w>block</q-w>;
<a name="106"><q-n>     106  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="107"><q-n>     107  </q-n></a>    <q-m>-- Implementing the active LOW reset pulse generating logic</q-m>
<a name="108"><q-n>     108  </q-n></a>    L_RSTN: <q-w>block</q-w>
<a name="109"><q-n>     109  </q-n></a>            <q-w>begin</q-w>
<a name="110"><q-n>     110  </q-n></a>                <q-w>process</q-w>(clk, rstn)   <q-w>is</q-w>
<a name="111"><q-n>     111  </q-n></a>                <q-w>begin</q-w>
<a name="112"><q-n>     112  </q-n></a>                    <q-w>if</q-w>(rstn = '0')  <q-w>then</q-w>
<a name="113"><q-n>     113  </q-n></a>                        <q-m>-- Reseting to 1</q-m>
<a name="114"><q-n>     114  </q-n></a>                        rstn_reg     &lt;= '1';
<a name="115"><q-n>     115  </q-n></a>                    <q-w>elsif</q-w>(rising_edge(clk))   <q-w>then</q-w>
<a name="116"><q-n>     116  </q-n></a>                        rstn_reg     &lt;= rstn_reg_nxt;
<a name="117"><q-n>     117  </q-n></a>                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="118"><q-n>     118  </q-n></a>                <q-w>end</q-w> <q-w>process</q-w>;
<a name="119"><q-n>     119  </q-n></a>
<a name="120"><q-n>     120  </q-n></a>                <q-m>-- Feeding in the NAND of Enable bit and the delayed 'wr' signal</q-m>
<a name="121"><q-n>     121  </q-n></a>                rstn_reg_nxt    &lt;=  <q-w>not</q-w>(wdata_reg(0) <q-w>and</q-w> wr_reg);
<a name="122"><q-n>     122  </q-n></a>                <q-m>-- Driving the output</q-m>
<a name="123"><q-n>     123  </q-n></a>                rstn_to_DUV     &lt;= rstn_reg;
<a name="124"><q-n>     124  </q-n></a>            <q-w>end</q-w> <q-w>block</q-w>;
<a name="125"><q-n>     125  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="126"><q-n>     126  </q-n></a>    L_RDATA:    <q-w>block</q-w>
<a name="127"><q-n>     127  </q-n></a>                <q-w>begin</q-w>
<a name="128"><q-n>     128  </q-n></a>                    <q-m>-- Drive the status of the module</q-m>
<a name="129"><q-n>     129  </q-n></a>                    rdata       &lt;=  sc_ff_out;
<a name="130"><q-n>     130  </q-n></a>                <q-w>end</q-w> <q-w>block</q-w>;
<a name="131"><q-n>     131  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="132"><q-n>     132  </q-n></a>    L_TRIG:     <q-w>block</q-w>
<a name="133"><q-n>     133  </q-n></a>                <q-w>begin</q-w>
<a name="134"><q-n>     134  </q-n></a>                    L_REG:  <q-w>if</q-w>(REG_LAYER = true)    <q-w>generate</q-w>
<a name="135"><q-n>     135  </q-n></a>                                <q-w>process</q-w>(clk,rstn) <q-w>is</q-w>
<a name="136"><q-n>     136  </q-n></a>                                <q-w>begin</q-w>
<a name="137"><q-n>     137  </q-n></a>                                    <q-w>if</q-w>(rstn = '0')  <q-w>then</q-w>
<a name="138"><q-n>     138  </q-n></a>                                        trig_out_reg    &lt;= '0';
<a name="139"><q-n>     139  </q-n></a>                                    <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="140"><q-n>     140  </q-n></a>                                        trig_out_reg    &lt;= re_det_out;
<a name="141"><q-n>     141  </q-n></a>                                    <q-w>end</q-w> <q-w>if</q-w>;
<a name="142"><q-n>     142  </q-n></a>                                <q-w>end</q-w> <q-w>process</q-w>;
<a name="143"><q-n>     143  </q-n></a>
<a name="144"><q-n>     144  </q-n></a>                                <q-m>-- Drive trig_out from flop</q-m>
<a name="145"><q-n>     145  </q-n></a>                                trig_out    &lt;= trig_out_reg;
<a name="146"><q-n>     146  </q-n></a>                            <q-w>end</q-w> <q-w>generate</q-w>;
<a name="147"><q-n>     147  </q-n></a>
<a name="148"><q-n>     148  </q-n></a>                    L_NOREG:<q-w>if</q-w>(REG_LAYER = false)   <q-w>generate</q-w>
<a name="149"><q-n>     149  </q-n></a>
<a name="150"><q-n>     150  </q-n></a>                                <q-m>-- Drive it directly</q-m>
<a name="151"><q-n>     151  </q-n></a>                                trig_out    &lt;= re_det_out;
<a name="152"><q-n>     152  </q-n></a>                            <q-w>end</q-w> <q-w>generate</q-w>;
<a name="153"><q-n>     153  </q-n></a>                <q-w>end</q-w> <q-w>block</q-w>;
<a name="154"><q-n>     154  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="155"><q-n>     155  </q-n></a>    L_STATUS:   <q-w>block</q-w>
<a name="156"><q-n>     156  </q-n></a>                <q-w>begin</q-w>
<a name="157"><q-n>     157  </q-n></a>                    <q-w>process</q-w>(clk, rstn)  <q-w>is</q-w>
<a name="158"><q-n>     158  </q-n></a>                    <q-w>begin</q-w>
<a name="159"><q-n>     159  </q-n></a>                        <q-w>if</q-w>(rstn = '0')  <q-w>then</q-w>
<a name="160"><q-n>     160  </q-n></a>                            <q-m>-- Reset to 1 !!!</q-m>
<a name="161"><q-n>     161  </q-n></a>                            re_det_reg  &lt;= '1';
<a name="162"><q-n>     162  </q-n></a>                        <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="163"><q-n>     163  </q-n></a>                            re_det_reg  &lt;= rstn_reg;
<a name="164"><q-n>     164  </q-n></a>
<a name="165"><q-n>     165  </q-n></a>                        <q-w>end</q-w> <q-w>if</q-w>;
<a name="166"><q-n>     166  </q-n></a>                    <q-w>end</q-w> <q-w>process</q-w>;
<a name="167"><q-n>     167  </q-n></a>
<a name="168"><q-n>     168  </q-n></a>                    <q-m>-- Drive the detector output</q-m>
<a name="169"><q-n>     169  </q-n></a>                    re_det_out  &lt;= (<q-w>not</q-w>(re_det_reg) <q-w>and</q-w> rstn_reg);
<a name="170"><q-n>     170  </q-n></a>
<a name="171"><q-n>     171  </q-n></a>                    L_SC_FF:    <q-w>entity</q-w> work.sc_ff(rtl)
<a name="172"><q-n>     172  </q-n></a>                        <q-w>port</q-w> <q-w>map</q-w>(
<a name="173"><q-n>     173  </q-n></a>                            clk     =&gt; clk         ,
<a name="174"><q-n>     174  </q-n></a>                            rstn    =&gt; rstn        ,
<a name="175"><q-n>     175  </q-n></a>                            set     =&gt; re_det_out  ,
<a name="176"><q-n>     176  </q-n></a>                            clr     =&gt; wdata_reg(1),
<a name="177"><q-n>     177  </q-n></a>                            q       =&gt; sc_ff_out
<a name="178"><q-n>     178  </q-n></a>                        );
<a name="179"><q-n>     179  </q-n></a>                <q-w>end</q-w> <q-w>block</q-w>;
<a name="180"><q-n>     180  </q-n></a>    <q-m>--------------------------------------------------------</q-m>
<a name="181"><q-n>     181  </q-n></a>
<a name="182"><q-n>     182  </q-n></a>
<a name="183"><q-n>     183  </q-n></a>
<a name="184"><q-n>     184  </q-n></a>
<a name="185"><q-n>     185  </q-n></a>
<a name="186"><q-n>     186  </q-n></a><q-w>end</q-w> <q-w>architecture</q-w> rtl;
<a name="187"><q-n>     187  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
</tt>
</pre>

  
</body>
</html>
