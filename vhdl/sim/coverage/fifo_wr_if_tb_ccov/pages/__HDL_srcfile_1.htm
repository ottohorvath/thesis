
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>--</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>-- Author: Otto Horvath</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>--</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="6"><q-n>     6  </q-n></a><q-m>--</q-m>
<a name="7"><q-n>     7  </q-n></a><q-m>-- Description:</q-m>
<a name="8"><q-n>     8  </q-n></a><q-m>--</q-m>
<a name="9"><q-n>     9  </q-n></a><q-m>--</q-m>
<a name="10"><q-n>     10  </q-n></a><q-m>--</q-m>
<a name="11"><q-n>     11  </q-n></a><q-m>--</q-m>
<a name="12"><q-n>     12  </q-n></a><q-m>--</q-m>
<a name="13"><q-n>     13  </q-n></a><q-m>--</q-m>
<a name="14"><q-n>     14  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a><q-w>library</q-w> ieee                    ;
<a name="17"><q-n>     17  </q-n></a><q-w>use</q-w>     ieee.std_logic_1164.<q-w>all</q-w> ;
<a name="18"><q-n>     18  </q-n></a><q-w>use</q-w>     ieee.numeric_std.<q-w>all</q-w>    ;
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>
<a name="21"><q-n>     21  </q-n></a><q-m>---------------------------------------------------------------------------</q-m>
<a name="22"><q-n>     22  </q-n></a><q-w>entity</q-w> fifo_wr_if <q-w>is</q-w>
<a name="23"><q-n>     23  </q-n></a>    <q-w>generic</q-w> (
<a name="24"><q-n>     24  </q-n></a>        REG_LAYER       :           <q-t>boolean</q-w> :=  false;  <q-m>-- For timing closure purposes</q-m>
<a name="25"><q-n>     25  </q-n></a>        DW              :           <q-t>integer</q-w> :=  32      <q-m>-- Data width</q-m>
<a name="26"><q-n>     26  </q-n></a>    );
<a name="27"><q-n>     27  </q-n></a>    <q-w>port</q-w> (
<a name="28"><q-n>     28  </q-n></a>        clk             :       <q-a>in</q-w>  <q-t>std_logic</q-w>                           ;
<a name="29"><q-n>     29  </q-n></a>        rstn            :       <q-a>in</q-w>  <q-t>std_logic</q-w>                           ;<q-m>-- Async. active LOW reset</q-m>
<a name="30"><q-n>     30  </q-n></a>        trig_in         :       <q-a>in</q-w>  <q-t>std_logic</q-w>                           ;<q-m>--</q-m>
<a name="31"><q-n>     31  </q-n></a>        trig_out_0      :       <q-a>out</q-w> <q-t>std_logic</q-w>                           ;<q-m>-- Trigger IF</q-m>
<a name="32"><q-n>     32  </q-n></a>        trig_out_1      :       <q-a>out</q-w> <q-t>std_logic</q-w>                           ;<q-m>--</q-m>
<a name="33"><q-n>     33  </q-n></a>        <q-m>-- coverage off t</q-m>
<a name="34"><q-n>     34  </q-n></a>        rdata           :       <q-a>out</q-w> <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0) ;
<a name="35"><q-n>     35  </q-n></a>        <q-m>-- coverage on</q-m>
<a name="36"><q-n>     36  </q-n></a>        wr              :       <q-a>in</q-w>  <q-t>std_logic</q-w>                           ;
<a name="37"><q-n>     37  </q-n></a>        wdata           :       <q-a>in</q-w>  <q-t>std_logic_vector</q-w>(2  <q-w>downto</q-w> 0);
<a name="38"><q-n>     38  </q-n></a>        full_to_DUV     :       <q-a>out</q-w> <q-t>std_logic</q-w>                           ;<q-m>--</q-m>
<a name="39"><q-n>     39  </q-n></a>        wr_from_DUV     :       <q-a>in</q-w>  <q-t>std_logic</q-w>                           ;<q-m>-- Write side</q-m>
<a name="40"><q-n>     40  </q-n></a>        <q-m>-- coverage off t</q-m>
<a name="41"><q-n>     41  </q-n></a>        wdata_from_DUV  :       <q-a>in</q-w> <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0)
<a name="42"><q-n>     42  </q-n></a>        <q-m>-- coverage on</q-m>
<a name="43"><q-n>     43  </q-n></a>    );
<a name="44"><q-n>     44  </q-n></a><q-w>end</q-w> <q-w>entity</q-w>;
<a name="45"><q-n>     45  </q-n></a><q-m>---------------------------------------------------------------------------------------------------</q-m>
<a name="46"><q-n>     46  </q-n></a><q-w>architecture</q-w> rtl <q-w>of</q-w> fifo_wr_if <q-w>is</q-w>
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>    <q-m>--------------------------------------------------------------------------------------------------</q-m>
<a name="49"><q-n>     49  </q-n></a>    <q-w>function</q-w> slv(
<a name="50"><q-n>     50  </q-n></a>        N: <q-t>natural</q-w>;
<a name="51"><q-n>     51  </q-n></a>        B: <q-t>std_logic</q-w>
<a name="52"><q-n>     52  </q-n></a>    )   <q-w>return</q-w> <q-t>std_logic_vector</q-w>  <q-m>-- Replacate std_logic-s to slv, like Verilog's replicate operator (e.g. {32{1b1}} )</q-m>
<a name="53"><q-n>     53  </q-n></a>    <q-w>is</q-w>
<a name="54"><q-n>     54  </q-n></a>        <q-w>variable</q-w> result: <q-t>std_logic_vector</q-w>(1 <q-w>to</q-w> N);
<a name="55"><q-n>     55  </q-n></a>    <q-w>begin</q-w>
<a name="56"><q-n>     56  </q-n></a>        <q-w>for</q-w> i <q-a>in</q-w> 1 <q-w>to</q-w> N <q-w>loop</q-w>
<a name="57"><q-n>     57  </q-n></a>            result(i) := B;
<a name="58"><q-n>     58  </q-n></a>        <q-w>end</q-w> <q-w>loop</q-w>;
<a name="59"><q-n>     59  </q-n></a>
<a name="60"><q-n>     60  </q-n></a>        <q-w>return</q-w> result;
<a name="61"><q-n>     61  </q-n></a>    <q-w>end</q-w>;
<a name="62"><q-n>     62  </q-n></a>    <q-m>--------------------------------------------------------------------------------------------------</q-m>
<a name="63"><q-n>     63  </q-n></a>    <q-m>--------------------------------------------------------------------------------------------------</q-m>
<a name="64"><q-n>     64  </q-n></a>    <q-m>--------------------------------------------------------------------------------------------------</q-m>
<a name="65"><q-n>     65  </q-n></a>
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>
<a name="68"><q-n>     68  </q-n></a>    <q-m>-- Read Data Mux</q-m>
<a name="69"><q-n>     69  </q-n></a>    <q-m>-- =============</q-m>
<a name="70"><q-n>     70  </q-n></a>    <q-m>-- 1: Selects the register which contains data written in by the DUV</q-m>
<a name="71"><q-n>     71  </q-n></a>    <q-m>-- 0: Selects status signals from the FSM</q-m>
<a name="72"><q-n>     72  </q-n></a>    <q-m>-- coverage off t</q-m>
<a name="73"><q-n>     73  </q-n></a>    <q-w>signal</q-w>      rdata_mux       :   <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0);
<a name="74"><q-n>     74  </q-n></a>    <q-w>signal</q-w>      rdata_mux_1     :   <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0);
<a name="75"><q-n>     75  </q-n></a>    <q-w>signal</q-w>      rdata_mux_0     :   <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0);
<a name="76"><q-n>     76  </q-n></a>    <q-m>-- coverage on</q-m>
<a name="77"><q-n>     77  </q-n></a>
<a name="78"><q-n>     78  </q-n></a>
<a name="79"><q-n>     79  </q-n></a>    <q-m>-- Read Data Register</q-m>
<a name="80"><q-n>     80  </q-n></a>    <q-m>-- ===================</q-m>
<a name="81"><q-n>     81  </q-n></a>    <q-m>-- Stores the data which is written by the DUV, which will be eventually read by the Processor</q-m>
<a name="82"><q-n>     82  </q-n></a>    <q-m>-- coverage off t</q-m>
<a name="83"><q-n>     83  </q-n></a>    <q-w>signal</q-w>      rdata_reg       :   <q-t>std_logic_vector</q-w>(DW-1 <q-w>downto</q-w> 0);
<a name="84"><q-n>     84  </q-n></a>    <q-m>-- coverage on</q-m>
<a name="85"><q-n>     85  </q-n></a>    <q-w>signal</q-w>      rdata_reg_en    :   <q-t>std_logic</q-w>;
<a name="86"><q-n>     86  </q-n></a>
<a name="87"><q-n>     87  </q-n></a>
<a name="88"><q-n>     88  </q-n></a>    <q-m>-- Signal from  FSM</q-m>
<a name="89"><q-n>     89  </q-n></a>    <q-m>-- ====================</q-m>
<a name="90"><q-n>     90  </q-n></a>    <q-w>signal</q-w>      show_data       :   <q-t>std_logic</q-w>;
<a name="91"><q-n>     91  </q-n></a>    <q-w>signal</q-w>      rcvd_data       :   <q-t>std_logic</q-w>;
<a name="92"><q-n>     92  </q-n></a>    <q-w>signal</q-w>      fifo_full       :   <q-t>std_logic</q-w>;
<a name="93"><q-n>     93  </q-n></a>    <q-w>signal</q-w>      enabled         :   <q-t>std_logic</q-w>;
<a name="94"><q-n>     94  </q-n></a>
<a name="95"><q-n>     95  </q-n></a>    <q-m>-- Register layer on output</q-m>
<a name="96"><q-n>     96  </q-n></a>    <q-m>-- ========================</q-m>
<a name="97"><q-n>     97  </q-n></a>    <q-w>signal</q-w>      fifo_full_reg   :   <q-t>std_logic</q-w>;
<a name="98"><q-n>     98  </q-n></a>
<a name="99"><q-n>     99  </q-n></a>
<a name="100"><q-n>     100  </q-n></a>    <q-m>-- Trigger output registers</q-m>
<a name="101"><q-n>     101  </q-n></a>    <q-m>-- ========================</q-m>
<a name="102"><q-n>     102  </q-n></a>    <q-w>signal</q-w>      trig_out_0_reg      :   <q-t>std_logic</q-w>;
<a name="103"><q-n>     103  </q-n></a>    <q-w>signal</q-w>      trig_out_1_reg      :   <q-t>std_logic</q-w>;
<a name="104"><q-n>     104  </q-n></a>
<a name="105"><q-n>     105  </q-n></a>
<a name="106"><q-n>     106  </q-n></a>
<a name="107"><q-n>     107  </q-n></a><q-w>begin</q-w>
<a name="108"><q-n>     108  </q-n></a>
<a name="109"><q-n>     109  </q-n></a>    <q-m>-------------------------------------------------------------</q-m>
<a name="110"><q-n>     110  </q-n></a>    L_RDATA:    <q-w>block</q-w>
<a name="111"><q-n>     111  </q-n></a>                <q-w>begin</q-w>
<a name="112"><q-n>     112  </q-n></a>                    <q-m>---------------------------------------------</q-m>
<a name="113"><q-n>     113  </q-n></a>                    L_RDATA_REG:    <q-w>process</q-w>(clk,rstn) <q-w>is</q-w>
<a name="114"><q-n>     114  </q-n></a>                                    <q-w>begin</q-w>
<a name="115"><q-n>     115  </q-n></a>                                        <q-w>if</q-w>( rstn='0' )<q-w>then</q-w>
<a name="116"><q-n>     116  </q-n></a>                                            rdata_reg   &lt;= slv(DW,'0');
<a name="117"><q-n>     117  </q-n></a>
<a name="118"><q-n>     118  </q-n></a>                                        <q-w>elsif</q-w>( rising_edge(clk) ) <q-w>then</q-w>
<a name="119"><q-n>     119  </q-n></a>
<a name="120"><q-n>     120  </q-n></a>                                            <q-m>-- Get data from DUV side</q-m>
<a name="121"><q-n>     121  </q-n></a>                                            <q-w>if</q-w>(rdata_reg_en = '1')  <q-w>then</q-w>
<a name="122"><q-n>     122  </q-n></a>                                                rdata_reg   &lt;= wdata_from_DUV;
<a name="123"><q-n>     123  </q-n></a>                                            <q-w>end</q-w> <q-w>if</q-w>;
<a name="124"><q-n>     124  </q-n></a>
<a name="125"><q-n>     125  </q-n></a>                                        <q-w>end</q-w> <q-w>if</q-w>;
<a name="126"><q-n>     126  </q-n></a>                                    <q-w>end</q-w> <q-w>process</q-w>;
<a name="127"><q-n>     127  </q-n></a>                    <q-m>---------------------------------------------</q-m>
<a name="128"><q-n>     128  </q-n></a>                    rdata_mux_1 &lt;=  rdata_reg;
<a name="129"><q-n>     129  </q-n></a>
<a name="130"><q-n>     130  </q-n></a>                    rdata_mux_0 &lt;=  slv(DW-3,'0')   &amp;
<a name="131"><q-n>     131  </q-n></a>                                    rcvd_data           &amp;   <q-m>-- [2]</q-m>
<a name="132"><q-n>     132  </q-n></a>                                    fifo_full           &amp;   <q-m>-- [1]</q-m>
<a name="133"><q-n>     133  </q-n></a>                                    enabled             ;   <q-m>-- [0]</q-m>
<a name="134"><q-n>     134  </q-n></a>
<a name="135"><q-n>     135  </q-n></a>                    rdata_mux   &lt;=  rdata_mux_1 <q-w>when</q-w> (show_data = '1') <q-w>else</q-w>
<a name="136"><q-n>     136  </q-n></a>                                    rdata_mux_0;
<a name="137"><q-n>     137  </q-n></a>                    <q-m>---------------------------------------------</q-m>
<a name="138"><q-n>     138  </q-n></a>
<a name="139"><q-n>     139  </q-n></a>                    <q-m>-- Drive the MUX to the output</q-m>
<a name="140"><q-n>     140  </q-n></a>                    rdata   &lt;= rdata_mux;
<a name="141"><q-n>     141  </q-n></a>
<a name="142"><q-n>     142  </q-n></a>                <q-w>end</q-w> <q-w>block</q-w>;
<a name="143"><q-n>     143  </q-n></a>    <q-m>-------------------------------------------------------------</q-m>
<a name="144"><q-n>     144  </q-n></a>    L_DUV_SIDE: <q-w>block</q-w>
<a name="145"><q-n>     145  </q-n></a>                <q-w>begin</q-w>
<a name="146"><q-n>     146  </q-n></a>                    <q-m>---------------------------------------------</q-m>
<a name="147"><q-n>     147  </q-n></a>                    L_REG:     <q-w>if</q-w>(REG_LAYER = true)    <q-w>generate</q-w>
<a name="148"><q-n>     148  </q-n></a>                                        <q-m>-------------------------------------</q-m>
<a name="149"><q-n>     149  </q-n></a>                                        <q-w>process</q-w>(clk,rstn) <q-w>is</q-w>
<a name="150"><q-n>     150  </q-n></a>                                        <q-w>begin</q-w>
<a name="151"><q-n>     151  </q-n></a>                                            <q-w>if</q-w>(rstn = '0')    <q-w>then</q-w>
<a name="152"><q-n>     152  </q-n></a>                                                fifo_full_reg   &lt;= '0';
<a name="153"><q-n>     153  </q-n></a>
<a name="154"><q-n>     154  </q-n></a>                                            <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="155"><q-n>     155  </q-n></a>                                                fifo_full_reg   &lt;= fifo_full;
<a name="156"><q-n>     156  </q-n></a>
<a name="157"><q-n>     157  </q-n></a>                                            <q-w>end</q-w> <q-w>if</q-w>;
<a name="158"><q-n>     158  </q-n></a>                                        <q-w>end</q-w> <q-w>process</q-w>;
<a name="159"><q-n>     159  </q-n></a>                                        <q-m>-------------------------------------</q-m>
<a name="160"><q-n>     160  </q-n></a>                                        <q-w>process</q-w>(clk,rstn) <q-w>is</q-w>
<a name="161"><q-n>     161  </q-n></a>                                        <q-w>begin</q-w>
<a name="162"><q-n>     162  </q-n></a>                                            <q-w>if</q-w>(rstn = '0')    <q-w>then</q-w>
<a name="163"><q-n>     163  </q-n></a>                                                trig_out_0_reg  &lt;= '0';
<a name="164"><q-n>     164  </q-n></a>
<a name="165"><q-n>     165  </q-n></a>                                            <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="166"><q-n>     166  </q-n></a>                                                trig_out_0_reg  &lt;= enabled;
<a name="167"><q-n>     167  </q-n></a>
<a name="168"><q-n>     168  </q-n></a>                                            <q-w>end</q-w> <q-w>if</q-w>;
<a name="169"><q-n>     169  </q-n></a>                                        <q-w>end</q-w> <q-w>process</q-w>;
<a name="170"><q-n>     170  </q-n></a>                                        <q-m>-------------------------------------</q-m>
<a name="171"><q-n>     171  </q-n></a>                                        <q-w>process</q-w>(clk,rstn) <q-w>is</q-w>
<a name="172"><q-n>     172  </q-n></a>                                        <q-w>begin</q-w>
<a name="173"><q-n>     173  </q-n></a>                                            <q-w>if</q-w>(rstn = '0')    <q-w>then</q-w>
<a name="174"><q-n>     174  </q-n></a>                                                trig_out_1_reg  &lt;= '0';
<a name="175"><q-n>     175  </q-n></a>
<a name="176"><q-n>     176  </q-n></a>                                            <q-w>elsif</q-w>(rising_edge(clk)) <q-w>then</q-w>
<a name="177"><q-n>     177  </q-n></a>                                                trig_out_1_reg  &lt;= rcvd_data;
<a name="178"><q-n>     178  </q-n></a>
<a name="179"><q-n>     179  </q-n></a>                                            <q-w>end</q-w> <q-w>if</q-w>;
<a name="180"><q-n>     180  </q-n></a>                                        <q-w>end</q-w> <q-w>process</q-w>;
<a name="181"><q-n>     181  </q-n></a>                                        <q-m>-------------------------------------</q-m>
<a name="182"><q-n>     182  </q-n></a>
<a name="183"><q-n>     183  </q-n></a>                                        <q-m>-- Drive the output from register</q-m>
<a name="184"><q-n>     184  </q-n></a>                                        full_to_DUV     &lt;= fifo_full_reg;
<a name="185"><q-n>     185  </q-n></a>                                        trig_out_0      &lt;= trig_out_0_reg;
<a name="186"><q-n>     186  </q-n></a>                                        trig_out_1      &lt;= trig_out_1_reg;
<a name="187"><q-n>     187  </q-n></a>
<a name="188"><q-n>     188  </q-n></a>                                    <q-w>end</q-w> <q-w>generate</q-w>;
<a name="189"><q-n>     189  </q-n></a>                    <q-m>---------------------------------------------</q-m>
<a name="190"><q-n>     190  </q-n></a>                    L_NO_REG_LAYER: <q-w>if</q-w>(REG_LAYER = false)   <q-w>generate</q-w>
<a name="191"><q-n>     191  </q-n></a>
<a name="192"><q-n>     192  </q-n></a>                                        <q-m>-- Drive output signal from FSM</q-m>
<a name="193"><q-n>     193  </q-n></a>                                        full_to_DUV     &lt;= fifo_full;
<a name="194"><q-n>     194  </q-n></a>                                        trig_out_0      &lt;= enabled  ;
<a name="195"><q-n>     195  </q-n></a>                                        trig_out_1      &lt;= rcvd_data;
<a name="196"><q-n>     196  </q-n></a>
<a name="197"><q-n>     197  </q-n></a>                                    <q-w>end</q-w> <q-w>generate</q-w>;
<a name="198"><q-n>     198  </q-n></a>                    <q-m>---------------------------------------------</q-m>
<a name="199"><q-n>     199  </q-n></a>                <q-w>end</q-w> <q-w>block</q-w>;
<a name="200"><q-n>     200  </q-n></a>    <q-m>-------------------------------------------------------------</q-m>
<a name="201"><q-n>     201  </q-n></a>
<a name="202"><q-n>     202  </q-n></a>
<a name="203"><q-n>     203  </q-n></a>    <q-m>-------------------------------------------------------------</q-m>
<a name="204"><q-n>     204  </q-n></a>    L_FSM:  <q-w>entity</q-w>  work.fifo_wr_if_fsm(rtl)
<a name="205"><q-n>     205  </q-n></a><q-m>--                generic map(</q-m>
<a name="206"><q-n>     206  </q-n></a><q-m>--                    DW              =&gt;  DW</q-m>
<a name="207"><q-n>     207  </q-n></a><q-m>--                )</q-m>
<a name="208"><q-n>     208  </q-n></a>                <q-w>port</q-w> <q-w>map</q-w>(
<a name="209"><q-n>     209  </q-n></a>                    clk             =&gt;  clk         ,
<a name="210"><q-n>     210  </q-n></a>                    rstn            =&gt;  rstn        ,
<a name="211"><q-n>     211  </q-n></a>                    trig_in_fsm     =&gt;  trig_in     ,
<a name="212"><q-n>     212  </q-n></a>                    wr              =&gt;  wr          ,
<a name="213"><q-n>     213  </q-n></a>                    wdata           =&gt;  wdata       ,
<a name="214"><q-n>     214  </q-n></a>                    fifo_wr         =&gt;  wr_from_DUV ,
<a name="215"><q-n>     215  </q-n></a>                    show_data_fsm   =&gt;  show_data   ,
<a name="216"><q-n>     216  </q-n></a>                    rdata_reg_en    =&gt;  rdata_reg_en,
<a name="217"><q-n>     217  </q-n></a>                    full            =&gt;  fifo_full   ,
<a name="218"><q-n>     218  </q-n></a>                    rcvd_data_fsm   =&gt;  rcvd_data   ,
<a name="219"><q-n>     219  </q-n></a>                    enabled_fsm     =&gt;  enabled
<a name="220"><q-n>     220  </q-n></a>                );
<a name="221"><q-n>     221  </q-n></a>    <q-m>-------------------------------------------------------------</q-m>
<a name="222"><q-n>     222  </q-n></a>
<a name="223"><q-n>     223  </q-n></a>
<a name="224"><q-n>     224  </q-n></a>
<a name="225"><q-n>     225  </q-n></a>
<a name="226"><q-n>     226  </q-n></a>
<a name="227"><q-n>     227  </q-n></a><q-w>end</q-w> <q-w>architecture</q-w>;</tt>
</pre>

  
</body>
</html>
