// demo_soc_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.1 590

`timescale 1 ps / 1 ps
module demo_soc_mm_interconnect_0 (
		input  wire [11:0] hps_0_h2f_lw_axi_master_awid,                                        //                                       hps_0_h2f_lw_axi_master.awid
		input  wire [20:0] hps_0_h2f_lw_axi_master_awaddr,                                      //                                                              .awaddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awlen,                                       //                                                              .awlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awsize,                                      //                                                              .awsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awburst,                                     //                                                              .awburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_awlock,                                      //                                                              .awlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_awcache,                                     //                                                              .awcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_awprot,                                      //                                                              .awprot
		input  wire        hps_0_h2f_lw_axi_master_awvalid,                                     //                                                              .awvalid
		output wire        hps_0_h2f_lw_axi_master_awready,                                     //                                                              .awready
		input  wire [11:0] hps_0_h2f_lw_axi_master_wid,                                         //                                                              .wid
		input  wire [31:0] hps_0_h2f_lw_axi_master_wdata,                                       //                                                              .wdata
		input  wire [3:0]  hps_0_h2f_lw_axi_master_wstrb,                                       //                                                              .wstrb
		input  wire        hps_0_h2f_lw_axi_master_wlast,                                       //                                                              .wlast
		input  wire        hps_0_h2f_lw_axi_master_wvalid,                                      //                                                              .wvalid
		output wire        hps_0_h2f_lw_axi_master_wready,                                      //                                                              .wready
		output wire [11:0] hps_0_h2f_lw_axi_master_bid,                                         //                                                              .bid
		output wire [1:0]  hps_0_h2f_lw_axi_master_bresp,                                       //                                                              .bresp
		output wire        hps_0_h2f_lw_axi_master_bvalid,                                      //                                                              .bvalid
		input  wire        hps_0_h2f_lw_axi_master_bready,                                      //                                                              .bready
		input  wire [11:0] hps_0_h2f_lw_axi_master_arid,                                        //                                                              .arid
		input  wire [20:0] hps_0_h2f_lw_axi_master_araddr,                                      //                                                              .araddr
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arlen,                                       //                                                              .arlen
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arsize,                                      //                                                              .arsize
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arburst,                                     //                                                              .arburst
		input  wire [1:0]  hps_0_h2f_lw_axi_master_arlock,                                      //                                                              .arlock
		input  wire [3:0]  hps_0_h2f_lw_axi_master_arcache,                                     //                                                              .arcache
		input  wire [2:0]  hps_0_h2f_lw_axi_master_arprot,                                      //                                                              .arprot
		input  wire        hps_0_h2f_lw_axi_master_arvalid,                                     //                                                              .arvalid
		output wire        hps_0_h2f_lw_axi_master_arready,                                     //                                                              .arready
		output wire [11:0] hps_0_h2f_lw_axi_master_rid,                                         //                                                              .rid
		output wire [31:0] hps_0_h2f_lw_axi_master_rdata,                                       //                                                              .rdata
		output wire [1:0]  hps_0_h2f_lw_axi_master_rresp,                                       //                                                              .rresp
		output wire        hps_0_h2f_lw_axi_master_rlast,                                       //                                                              .rlast
		output wire        hps_0_h2f_lw_axi_master_rvalid,                                      //                                                              .rvalid
		input  wire        hps_0_h2f_lw_axi_master_rready,                                      //                                                              .rready
		input  wire        clk_0_clk_clk,                                                       //                                                     clk_0_clk.clk
		input  wire        clk_gen_0_clk_out_clk,                                               //                                             clk_gen_0_clk_out.clk
		input  wire        clk_gen_0_reset_reset_bridge_in_reset_reset,                         //                         clk_gen_0_reset_reset_bridge_in_reset.reset
		input  wire        delta_timer_0_reset_reset_bridge_in_reset_reset,                     //                     delta_timer_0_reset_reset_bridge_in_reset.reset
		input  wire        hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		output wire        clk_gen_0_AVS_write,                                                 //                                                 clk_gen_0_AVS.write
		input  wire [31:0] clk_gen_0_AVS_readdata,                                              //                                                              .readdata
		output wire [31:0] clk_gen_0_AVS_writedata,                                             //                                                              .writedata
		output wire        dct_2d_ip_0_avalon_slave_0_write,                                    //                                    dct_2d_ip_0_avalon_slave_0.write
		output wire [31:0] dct_2d_ip_0_avalon_slave_0_writedata,                                //                                                              .writedata
		output wire        delta_timer_0_AVS_write,                                             //                                             delta_timer_0_AVS.write
		input  wire [31:0] delta_timer_0_AVS_readdata,                                          //                                                              .readdata
		output wire [31:0] delta_timer_0_AVS_writedata,                                         //                                                              .writedata
		output wire        fifo_snk_0_avalon_slave_0_write,                                     //                                     fifo_snk_0_avalon_slave_0.write
		output wire        fifo_snk_0_avalon_slave_0_read,                                      //                                                              .read
		input  wire [31:0] fifo_snk_0_avalon_slave_0_readdata,                                  //                                                              .readdata
		output wire [31:0] fifo_snk_0_avalon_slave_0_writedata,                                 //                                                              .writedata
		output wire        mode_selector_0_avalon_slave_0_write,                                //                                mode_selector_0_avalon_slave_0.write
		input  wire [31:0] mode_selector_0_avalon_slave_0_readdata,                             //                                                              .readdata
		output wire [31:0] mode_selector_0_avalon_slave_0_writedata,                            //                                                              .writedata
		output wire        re_det_0_avalon_slave_0_write,                                       //                                       re_det_0_avalon_slave_0.write
		input  wire [31:0] re_det_0_avalon_slave_0_readdata,                                    //                                                              .readdata
		output wire [31:0] re_det_0_avalon_slave_0_writedata,                                   //                                                              .writedata
		output wire        rstn_gen_0_AVS_write,                                                //                                                rstn_gen_0_AVS.write
		input  wire [31:0] rstn_gen_0_AVS_readdata,                                             //                                                              .readdata
		output wire [31:0] rstn_gen_0_AVS_writedata                                             //                                                              .writedata
	);

	wire   [31:0] delta_timer_0_avs_agent_m0_readdata;                                // delta_timer_0_AVS_translator:uav_readdata -> delta_timer_0_AVS_agent:m0_readdata
	wire          delta_timer_0_avs_agent_m0_waitrequest;                             // delta_timer_0_AVS_translator:uav_waitrequest -> delta_timer_0_AVS_agent:m0_waitrequest
	wire          delta_timer_0_avs_agent_m0_debugaccess;                             // delta_timer_0_AVS_agent:m0_debugaccess -> delta_timer_0_AVS_translator:uav_debugaccess
	wire   [20:0] delta_timer_0_avs_agent_m0_address;                                 // delta_timer_0_AVS_agent:m0_address -> delta_timer_0_AVS_translator:uav_address
	wire    [3:0] delta_timer_0_avs_agent_m0_byteenable;                              // delta_timer_0_AVS_agent:m0_byteenable -> delta_timer_0_AVS_translator:uav_byteenable
	wire          delta_timer_0_avs_agent_m0_read;                                    // delta_timer_0_AVS_agent:m0_read -> delta_timer_0_AVS_translator:uav_read
	wire          delta_timer_0_avs_agent_m0_readdatavalid;                           // delta_timer_0_AVS_translator:uav_readdatavalid -> delta_timer_0_AVS_agent:m0_readdatavalid
	wire          delta_timer_0_avs_agent_m0_lock;                                    // delta_timer_0_AVS_agent:m0_lock -> delta_timer_0_AVS_translator:uav_lock
	wire   [31:0] delta_timer_0_avs_agent_m0_writedata;                               // delta_timer_0_AVS_agent:m0_writedata -> delta_timer_0_AVS_translator:uav_writedata
	wire          delta_timer_0_avs_agent_m0_write;                                   // delta_timer_0_AVS_agent:m0_write -> delta_timer_0_AVS_translator:uav_write
	wire    [2:0] delta_timer_0_avs_agent_m0_burstcount;                              // delta_timer_0_AVS_agent:m0_burstcount -> delta_timer_0_AVS_translator:uav_burstcount
	wire          delta_timer_0_avs_agent_rf_source_valid;                            // delta_timer_0_AVS_agent:rf_source_valid -> delta_timer_0_AVS_agent_rsp_fifo:in_valid
	wire  [116:0] delta_timer_0_avs_agent_rf_source_data;                             // delta_timer_0_AVS_agent:rf_source_data -> delta_timer_0_AVS_agent_rsp_fifo:in_data
	wire          delta_timer_0_avs_agent_rf_source_ready;                            // delta_timer_0_AVS_agent_rsp_fifo:in_ready -> delta_timer_0_AVS_agent:rf_source_ready
	wire          delta_timer_0_avs_agent_rf_source_startofpacket;                    // delta_timer_0_AVS_agent:rf_source_startofpacket -> delta_timer_0_AVS_agent_rsp_fifo:in_startofpacket
	wire          delta_timer_0_avs_agent_rf_source_endofpacket;                      // delta_timer_0_AVS_agent:rf_source_endofpacket -> delta_timer_0_AVS_agent_rsp_fifo:in_endofpacket
	wire          delta_timer_0_avs_agent_rsp_fifo_out_valid;                         // delta_timer_0_AVS_agent_rsp_fifo:out_valid -> delta_timer_0_AVS_agent:rf_sink_valid
	wire  [116:0] delta_timer_0_avs_agent_rsp_fifo_out_data;                          // delta_timer_0_AVS_agent_rsp_fifo:out_data -> delta_timer_0_AVS_agent:rf_sink_data
	wire          delta_timer_0_avs_agent_rsp_fifo_out_ready;                         // delta_timer_0_AVS_agent:rf_sink_ready -> delta_timer_0_AVS_agent_rsp_fifo:out_ready
	wire          delta_timer_0_avs_agent_rsp_fifo_out_startofpacket;                 // delta_timer_0_AVS_agent_rsp_fifo:out_startofpacket -> delta_timer_0_AVS_agent:rf_sink_startofpacket
	wire          delta_timer_0_avs_agent_rsp_fifo_out_endofpacket;                   // delta_timer_0_AVS_agent_rsp_fifo:out_endofpacket -> delta_timer_0_AVS_agent:rf_sink_endofpacket
	wire          delta_timer_0_avs_agent_rdata_fifo_src_valid;                       // delta_timer_0_AVS_agent:rdata_fifo_src_valid -> delta_timer_0_AVS_agent_rdata_fifo:in_valid
	wire   [33:0] delta_timer_0_avs_agent_rdata_fifo_src_data;                        // delta_timer_0_AVS_agent:rdata_fifo_src_data -> delta_timer_0_AVS_agent_rdata_fifo:in_data
	wire          delta_timer_0_avs_agent_rdata_fifo_src_ready;                       // delta_timer_0_AVS_agent_rdata_fifo:in_ready -> delta_timer_0_AVS_agent:rdata_fifo_src_ready
	wire   [31:0] clk_gen_0_avs_agent_m0_readdata;                                    // clk_gen_0_AVS_translator:uav_readdata -> clk_gen_0_AVS_agent:m0_readdata
	wire          clk_gen_0_avs_agent_m0_waitrequest;                                 // clk_gen_0_AVS_translator:uav_waitrequest -> clk_gen_0_AVS_agent:m0_waitrequest
	wire          clk_gen_0_avs_agent_m0_debugaccess;                                 // clk_gen_0_AVS_agent:m0_debugaccess -> clk_gen_0_AVS_translator:uav_debugaccess
	wire   [20:0] clk_gen_0_avs_agent_m0_address;                                     // clk_gen_0_AVS_agent:m0_address -> clk_gen_0_AVS_translator:uav_address
	wire    [3:0] clk_gen_0_avs_agent_m0_byteenable;                                  // clk_gen_0_AVS_agent:m0_byteenable -> clk_gen_0_AVS_translator:uav_byteenable
	wire          clk_gen_0_avs_agent_m0_read;                                        // clk_gen_0_AVS_agent:m0_read -> clk_gen_0_AVS_translator:uav_read
	wire          clk_gen_0_avs_agent_m0_readdatavalid;                               // clk_gen_0_AVS_translator:uav_readdatavalid -> clk_gen_0_AVS_agent:m0_readdatavalid
	wire          clk_gen_0_avs_agent_m0_lock;                                        // clk_gen_0_AVS_agent:m0_lock -> clk_gen_0_AVS_translator:uav_lock
	wire   [31:0] clk_gen_0_avs_agent_m0_writedata;                                   // clk_gen_0_AVS_agent:m0_writedata -> clk_gen_0_AVS_translator:uav_writedata
	wire          clk_gen_0_avs_agent_m0_write;                                       // clk_gen_0_AVS_agent:m0_write -> clk_gen_0_AVS_translator:uav_write
	wire    [2:0] clk_gen_0_avs_agent_m0_burstcount;                                  // clk_gen_0_AVS_agent:m0_burstcount -> clk_gen_0_AVS_translator:uav_burstcount
	wire          clk_gen_0_avs_agent_rf_source_valid;                                // clk_gen_0_AVS_agent:rf_source_valid -> clk_gen_0_AVS_agent_rsp_fifo:in_valid
	wire  [116:0] clk_gen_0_avs_agent_rf_source_data;                                 // clk_gen_0_AVS_agent:rf_source_data -> clk_gen_0_AVS_agent_rsp_fifo:in_data
	wire          clk_gen_0_avs_agent_rf_source_ready;                                // clk_gen_0_AVS_agent_rsp_fifo:in_ready -> clk_gen_0_AVS_agent:rf_source_ready
	wire          clk_gen_0_avs_agent_rf_source_startofpacket;                        // clk_gen_0_AVS_agent:rf_source_startofpacket -> clk_gen_0_AVS_agent_rsp_fifo:in_startofpacket
	wire          clk_gen_0_avs_agent_rf_source_endofpacket;                          // clk_gen_0_AVS_agent:rf_source_endofpacket -> clk_gen_0_AVS_agent_rsp_fifo:in_endofpacket
	wire          clk_gen_0_avs_agent_rsp_fifo_out_valid;                             // clk_gen_0_AVS_agent_rsp_fifo:out_valid -> clk_gen_0_AVS_agent:rf_sink_valid
	wire  [116:0] clk_gen_0_avs_agent_rsp_fifo_out_data;                              // clk_gen_0_AVS_agent_rsp_fifo:out_data -> clk_gen_0_AVS_agent:rf_sink_data
	wire          clk_gen_0_avs_agent_rsp_fifo_out_ready;                             // clk_gen_0_AVS_agent:rf_sink_ready -> clk_gen_0_AVS_agent_rsp_fifo:out_ready
	wire          clk_gen_0_avs_agent_rsp_fifo_out_startofpacket;                     // clk_gen_0_AVS_agent_rsp_fifo:out_startofpacket -> clk_gen_0_AVS_agent:rf_sink_startofpacket
	wire          clk_gen_0_avs_agent_rsp_fifo_out_endofpacket;                       // clk_gen_0_AVS_agent_rsp_fifo:out_endofpacket -> clk_gen_0_AVS_agent:rf_sink_endofpacket
	wire          clk_gen_0_avs_agent_rdata_fifo_src_valid;                           // clk_gen_0_AVS_agent:rdata_fifo_src_valid -> clk_gen_0_AVS_agent_rdata_fifo:in_valid
	wire   [33:0] clk_gen_0_avs_agent_rdata_fifo_src_data;                            // clk_gen_0_AVS_agent:rdata_fifo_src_data -> clk_gen_0_AVS_agent_rdata_fifo:in_data
	wire          clk_gen_0_avs_agent_rdata_fifo_src_ready;                           // clk_gen_0_AVS_agent_rdata_fifo:in_ready -> clk_gen_0_AVS_agent:rdata_fifo_src_ready
	wire   [31:0] rstn_gen_0_avs_agent_m0_readdata;                                   // rstn_gen_0_AVS_translator:uav_readdata -> rstn_gen_0_AVS_agent:m0_readdata
	wire          rstn_gen_0_avs_agent_m0_waitrequest;                                // rstn_gen_0_AVS_translator:uav_waitrequest -> rstn_gen_0_AVS_agent:m0_waitrequest
	wire          rstn_gen_0_avs_agent_m0_debugaccess;                                // rstn_gen_0_AVS_agent:m0_debugaccess -> rstn_gen_0_AVS_translator:uav_debugaccess
	wire   [20:0] rstn_gen_0_avs_agent_m0_address;                                    // rstn_gen_0_AVS_agent:m0_address -> rstn_gen_0_AVS_translator:uav_address
	wire    [3:0] rstn_gen_0_avs_agent_m0_byteenable;                                 // rstn_gen_0_AVS_agent:m0_byteenable -> rstn_gen_0_AVS_translator:uav_byteenable
	wire          rstn_gen_0_avs_agent_m0_read;                                       // rstn_gen_0_AVS_agent:m0_read -> rstn_gen_0_AVS_translator:uav_read
	wire          rstn_gen_0_avs_agent_m0_readdatavalid;                              // rstn_gen_0_AVS_translator:uav_readdatavalid -> rstn_gen_0_AVS_agent:m0_readdatavalid
	wire          rstn_gen_0_avs_agent_m0_lock;                                       // rstn_gen_0_AVS_agent:m0_lock -> rstn_gen_0_AVS_translator:uav_lock
	wire   [31:0] rstn_gen_0_avs_agent_m0_writedata;                                  // rstn_gen_0_AVS_agent:m0_writedata -> rstn_gen_0_AVS_translator:uav_writedata
	wire          rstn_gen_0_avs_agent_m0_write;                                      // rstn_gen_0_AVS_agent:m0_write -> rstn_gen_0_AVS_translator:uav_write
	wire    [2:0] rstn_gen_0_avs_agent_m0_burstcount;                                 // rstn_gen_0_AVS_agent:m0_burstcount -> rstn_gen_0_AVS_translator:uav_burstcount
	wire          rstn_gen_0_avs_agent_rf_source_valid;                               // rstn_gen_0_AVS_agent:rf_source_valid -> rstn_gen_0_AVS_agent_rsp_fifo:in_valid
	wire  [116:0] rstn_gen_0_avs_agent_rf_source_data;                                // rstn_gen_0_AVS_agent:rf_source_data -> rstn_gen_0_AVS_agent_rsp_fifo:in_data
	wire          rstn_gen_0_avs_agent_rf_source_ready;                               // rstn_gen_0_AVS_agent_rsp_fifo:in_ready -> rstn_gen_0_AVS_agent:rf_source_ready
	wire          rstn_gen_0_avs_agent_rf_source_startofpacket;                       // rstn_gen_0_AVS_agent:rf_source_startofpacket -> rstn_gen_0_AVS_agent_rsp_fifo:in_startofpacket
	wire          rstn_gen_0_avs_agent_rf_source_endofpacket;                         // rstn_gen_0_AVS_agent:rf_source_endofpacket -> rstn_gen_0_AVS_agent_rsp_fifo:in_endofpacket
	wire          rstn_gen_0_avs_agent_rsp_fifo_out_valid;                            // rstn_gen_0_AVS_agent_rsp_fifo:out_valid -> rstn_gen_0_AVS_agent:rf_sink_valid
	wire  [116:0] rstn_gen_0_avs_agent_rsp_fifo_out_data;                             // rstn_gen_0_AVS_agent_rsp_fifo:out_data -> rstn_gen_0_AVS_agent:rf_sink_data
	wire          rstn_gen_0_avs_agent_rsp_fifo_out_ready;                            // rstn_gen_0_AVS_agent:rf_sink_ready -> rstn_gen_0_AVS_agent_rsp_fifo:out_ready
	wire          rstn_gen_0_avs_agent_rsp_fifo_out_startofpacket;                    // rstn_gen_0_AVS_agent_rsp_fifo:out_startofpacket -> rstn_gen_0_AVS_agent:rf_sink_startofpacket
	wire          rstn_gen_0_avs_agent_rsp_fifo_out_endofpacket;                      // rstn_gen_0_AVS_agent_rsp_fifo:out_endofpacket -> rstn_gen_0_AVS_agent:rf_sink_endofpacket
	wire          rstn_gen_0_avs_agent_rdata_fifo_src_valid;                          // rstn_gen_0_AVS_agent:rdata_fifo_src_valid -> rstn_gen_0_AVS_agent_rdata_fifo:in_valid
	wire   [33:0] rstn_gen_0_avs_agent_rdata_fifo_src_data;                           // rstn_gen_0_AVS_agent:rdata_fifo_src_data -> rstn_gen_0_AVS_agent_rdata_fifo:in_data
	wire          rstn_gen_0_avs_agent_rdata_fifo_src_ready;                          // rstn_gen_0_AVS_agent_rdata_fifo:in_ready -> rstn_gen_0_AVS_agent:rdata_fifo_src_ready
	wire   [31:0] re_det_0_avalon_slave_0_agent_m0_readdata;                          // re_det_0_avalon_slave_0_translator:uav_readdata -> re_det_0_avalon_slave_0_agent:m0_readdata
	wire          re_det_0_avalon_slave_0_agent_m0_waitrequest;                       // re_det_0_avalon_slave_0_translator:uav_waitrequest -> re_det_0_avalon_slave_0_agent:m0_waitrequest
	wire          re_det_0_avalon_slave_0_agent_m0_debugaccess;                       // re_det_0_avalon_slave_0_agent:m0_debugaccess -> re_det_0_avalon_slave_0_translator:uav_debugaccess
	wire   [20:0] re_det_0_avalon_slave_0_agent_m0_address;                           // re_det_0_avalon_slave_0_agent:m0_address -> re_det_0_avalon_slave_0_translator:uav_address
	wire    [3:0] re_det_0_avalon_slave_0_agent_m0_byteenable;                        // re_det_0_avalon_slave_0_agent:m0_byteenable -> re_det_0_avalon_slave_0_translator:uav_byteenable
	wire          re_det_0_avalon_slave_0_agent_m0_read;                              // re_det_0_avalon_slave_0_agent:m0_read -> re_det_0_avalon_slave_0_translator:uav_read
	wire          re_det_0_avalon_slave_0_agent_m0_readdatavalid;                     // re_det_0_avalon_slave_0_translator:uav_readdatavalid -> re_det_0_avalon_slave_0_agent:m0_readdatavalid
	wire          re_det_0_avalon_slave_0_agent_m0_lock;                              // re_det_0_avalon_slave_0_agent:m0_lock -> re_det_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] re_det_0_avalon_slave_0_agent_m0_writedata;                         // re_det_0_avalon_slave_0_agent:m0_writedata -> re_det_0_avalon_slave_0_translator:uav_writedata
	wire          re_det_0_avalon_slave_0_agent_m0_write;                             // re_det_0_avalon_slave_0_agent:m0_write -> re_det_0_avalon_slave_0_translator:uav_write
	wire    [2:0] re_det_0_avalon_slave_0_agent_m0_burstcount;                        // re_det_0_avalon_slave_0_agent:m0_burstcount -> re_det_0_avalon_slave_0_translator:uav_burstcount
	wire          re_det_0_avalon_slave_0_agent_rf_source_valid;                      // re_det_0_avalon_slave_0_agent:rf_source_valid -> re_det_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [116:0] re_det_0_avalon_slave_0_agent_rf_source_data;                       // re_det_0_avalon_slave_0_agent:rf_source_data -> re_det_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          re_det_0_avalon_slave_0_agent_rf_source_ready;                      // re_det_0_avalon_slave_0_agent_rsp_fifo:in_ready -> re_det_0_avalon_slave_0_agent:rf_source_ready
	wire          re_det_0_avalon_slave_0_agent_rf_source_startofpacket;              // re_det_0_avalon_slave_0_agent:rf_source_startofpacket -> re_det_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          re_det_0_avalon_slave_0_agent_rf_source_endofpacket;                // re_det_0_avalon_slave_0_agent:rf_source_endofpacket -> re_det_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          re_det_0_avalon_slave_0_agent_rsp_fifo_out_valid;                   // re_det_0_avalon_slave_0_agent_rsp_fifo:out_valid -> re_det_0_avalon_slave_0_agent:rf_sink_valid
	wire  [116:0] re_det_0_avalon_slave_0_agent_rsp_fifo_out_data;                    // re_det_0_avalon_slave_0_agent_rsp_fifo:out_data -> re_det_0_avalon_slave_0_agent:rf_sink_data
	wire          re_det_0_avalon_slave_0_agent_rsp_fifo_out_ready;                   // re_det_0_avalon_slave_0_agent:rf_sink_ready -> re_det_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          re_det_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;           // re_det_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> re_det_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          re_det_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;             // re_det_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> re_det_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          re_det_0_avalon_slave_0_agent_rdata_fifo_src_valid;                 // re_det_0_avalon_slave_0_agent:rdata_fifo_src_valid -> re_det_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] re_det_0_avalon_slave_0_agent_rdata_fifo_src_data;                  // re_det_0_avalon_slave_0_agent:rdata_fifo_src_data -> re_det_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          re_det_0_avalon_slave_0_agent_rdata_fifo_src_ready;                 // re_det_0_avalon_slave_0_agent_rdata_fifo:in_ready -> re_det_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] fifo_snk_0_avalon_slave_0_agent_m0_readdata;                        // fifo_snk_0_avalon_slave_0_translator:uav_readdata -> fifo_snk_0_avalon_slave_0_agent:m0_readdata
	wire          fifo_snk_0_avalon_slave_0_agent_m0_waitrequest;                     // fifo_snk_0_avalon_slave_0_translator:uav_waitrequest -> fifo_snk_0_avalon_slave_0_agent:m0_waitrequest
	wire          fifo_snk_0_avalon_slave_0_agent_m0_debugaccess;                     // fifo_snk_0_avalon_slave_0_agent:m0_debugaccess -> fifo_snk_0_avalon_slave_0_translator:uav_debugaccess
	wire   [20:0] fifo_snk_0_avalon_slave_0_agent_m0_address;                         // fifo_snk_0_avalon_slave_0_agent:m0_address -> fifo_snk_0_avalon_slave_0_translator:uav_address
	wire    [3:0] fifo_snk_0_avalon_slave_0_agent_m0_byteenable;                      // fifo_snk_0_avalon_slave_0_agent:m0_byteenable -> fifo_snk_0_avalon_slave_0_translator:uav_byteenable
	wire          fifo_snk_0_avalon_slave_0_agent_m0_read;                            // fifo_snk_0_avalon_slave_0_agent:m0_read -> fifo_snk_0_avalon_slave_0_translator:uav_read
	wire          fifo_snk_0_avalon_slave_0_agent_m0_readdatavalid;                   // fifo_snk_0_avalon_slave_0_translator:uav_readdatavalid -> fifo_snk_0_avalon_slave_0_agent:m0_readdatavalid
	wire          fifo_snk_0_avalon_slave_0_agent_m0_lock;                            // fifo_snk_0_avalon_slave_0_agent:m0_lock -> fifo_snk_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] fifo_snk_0_avalon_slave_0_agent_m0_writedata;                       // fifo_snk_0_avalon_slave_0_agent:m0_writedata -> fifo_snk_0_avalon_slave_0_translator:uav_writedata
	wire          fifo_snk_0_avalon_slave_0_agent_m0_write;                           // fifo_snk_0_avalon_slave_0_agent:m0_write -> fifo_snk_0_avalon_slave_0_translator:uav_write
	wire    [2:0] fifo_snk_0_avalon_slave_0_agent_m0_burstcount;                      // fifo_snk_0_avalon_slave_0_agent:m0_burstcount -> fifo_snk_0_avalon_slave_0_translator:uav_burstcount
	wire          fifo_snk_0_avalon_slave_0_agent_rf_source_valid;                    // fifo_snk_0_avalon_slave_0_agent:rf_source_valid -> fifo_snk_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [116:0] fifo_snk_0_avalon_slave_0_agent_rf_source_data;                     // fifo_snk_0_avalon_slave_0_agent:rf_source_data -> fifo_snk_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          fifo_snk_0_avalon_slave_0_agent_rf_source_ready;                    // fifo_snk_0_avalon_slave_0_agent_rsp_fifo:in_ready -> fifo_snk_0_avalon_slave_0_agent:rf_source_ready
	wire          fifo_snk_0_avalon_slave_0_agent_rf_source_startofpacket;            // fifo_snk_0_avalon_slave_0_agent:rf_source_startofpacket -> fifo_snk_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          fifo_snk_0_avalon_slave_0_agent_rf_source_endofpacket;              // fifo_snk_0_avalon_slave_0_agent:rf_source_endofpacket -> fifo_snk_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_valid;                 // fifo_snk_0_avalon_slave_0_agent_rsp_fifo:out_valid -> fifo_snk_0_avalon_slave_0_agent:rf_sink_valid
	wire  [116:0] fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_data;                  // fifo_snk_0_avalon_slave_0_agent_rsp_fifo:out_data -> fifo_snk_0_avalon_slave_0_agent:rf_sink_data
	wire          fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_ready;                 // fifo_snk_0_avalon_slave_0_agent:rf_sink_ready -> fifo_snk_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;         // fifo_snk_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> fifo_snk_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;           // fifo_snk_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> fifo_snk_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_valid;               // fifo_snk_0_avalon_slave_0_agent:rdata_fifo_src_valid -> fifo_snk_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_data;                // fifo_snk_0_avalon_slave_0_agent:rdata_fifo_src_data -> fifo_snk_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_ready;               // fifo_snk_0_avalon_slave_0_agent_rdata_fifo:in_ready -> fifo_snk_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] dct_2d_ip_0_avalon_slave_0_agent_m0_readdata;                       // dct_2d_ip_0_avalon_slave_0_translator:uav_readdata -> dct_2d_ip_0_avalon_slave_0_agent:m0_readdata
	wire          dct_2d_ip_0_avalon_slave_0_agent_m0_waitrequest;                    // dct_2d_ip_0_avalon_slave_0_translator:uav_waitrequest -> dct_2d_ip_0_avalon_slave_0_agent:m0_waitrequest
	wire          dct_2d_ip_0_avalon_slave_0_agent_m0_debugaccess;                    // dct_2d_ip_0_avalon_slave_0_agent:m0_debugaccess -> dct_2d_ip_0_avalon_slave_0_translator:uav_debugaccess
	wire   [20:0] dct_2d_ip_0_avalon_slave_0_agent_m0_address;                        // dct_2d_ip_0_avalon_slave_0_agent:m0_address -> dct_2d_ip_0_avalon_slave_0_translator:uav_address
	wire    [3:0] dct_2d_ip_0_avalon_slave_0_agent_m0_byteenable;                     // dct_2d_ip_0_avalon_slave_0_agent:m0_byteenable -> dct_2d_ip_0_avalon_slave_0_translator:uav_byteenable
	wire          dct_2d_ip_0_avalon_slave_0_agent_m0_read;                           // dct_2d_ip_0_avalon_slave_0_agent:m0_read -> dct_2d_ip_0_avalon_slave_0_translator:uav_read
	wire          dct_2d_ip_0_avalon_slave_0_agent_m0_readdatavalid;                  // dct_2d_ip_0_avalon_slave_0_translator:uav_readdatavalid -> dct_2d_ip_0_avalon_slave_0_agent:m0_readdatavalid
	wire          dct_2d_ip_0_avalon_slave_0_agent_m0_lock;                           // dct_2d_ip_0_avalon_slave_0_agent:m0_lock -> dct_2d_ip_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] dct_2d_ip_0_avalon_slave_0_agent_m0_writedata;                      // dct_2d_ip_0_avalon_slave_0_agent:m0_writedata -> dct_2d_ip_0_avalon_slave_0_translator:uav_writedata
	wire          dct_2d_ip_0_avalon_slave_0_agent_m0_write;                          // dct_2d_ip_0_avalon_slave_0_agent:m0_write -> dct_2d_ip_0_avalon_slave_0_translator:uav_write
	wire    [2:0] dct_2d_ip_0_avalon_slave_0_agent_m0_burstcount;                     // dct_2d_ip_0_avalon_slave_0_agent:m0_burstcount -> dct_2d_ip_0_avalon_slave_0_translator:uav_burstcount
	wire          dct_2d_ip_0_avalon_slave_0_agent_rf_source_valid;                   // dct_2d_ip_0_avalon_slave_0_agent:rf_source_valid -> dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [116:0] dct_2d_ip_0_avalon_slave_0_agent_rf_source_data;                    // dct_2d_ip_0_avalon_slave_0_agent:rf_source_data -> dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          dct_2d_ip_0_avalon_slave_0_agent_rf_source_ready;                   // dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:in_ready -> dct_2d_ip_0_avalon_slave_0_agent:rf_source_ready
	wire          dct_2d_ip_0_avalon_slave_0_agent_rf_source_startofpacket;           // dct_2d_ip_0_avalon_slave_0_agent:rf_source_startofpacket -> dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          dct_2d_ip_0_avalon_slave_0_agent_rf_source_endofpacket;             // dct_2d_ip_0_avalon_slave_0_agent:rf_source_endofpacket -> dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_valid;                // dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:out_valid -> dct_2d_ip_0_avalon_slave_0_agent:rf_sink_valid
	wire  [116:0] dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_data;                 // dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:out_data -> dct_2d_ip_0_avalon_slave_0_agent:rf_sink_data
	wire          dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_ready;                // dct_2d_ip_0_avalon_slave_0_agent:rf_sink_ready -> dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;        // dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> dct_2d_ip_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;          // dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> dct_2d_ip_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_valid;              // dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_src_valid -> dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_data;               // dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_src_data -> dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_ready;              // dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo:in_ready -> dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire   [31:0] mode_selector_0_avalon_slave_0_agent_m0_readdata;                   // mode_selector_0_avalon_slave_0_translator:uav_readdata -> mode_selector_0_avalon_slave_0_agent:m0_readdata
	wire          mode_selector_0_avalon_slave_0_agent_m0_waitrequest;                // mode_selector_0_avalon_slave_0_translator:uav_waitrequest -> mode_selector_0_avalon_slave_0_agent:m0_waitrequest
	wire          mode_selector_0_avalon_slave_0_agent_m0_debugaccess;                // mode_selector_0_avalon_slave_0_agent:m0_debugaccess -> mode_selector_0_avalon_slave_0_translator:uav_debugaccess
	wire   [20:0] mode_selector_0_avalon_slave_0_agent_m0_address;                    // mode_selector_0_avalon_slave_0_agent:m0_address -> mode_selector_0_avalon_slave_0_translator:uav_address
	wire    [3:0] mode_selector_0_avalon_slave_0_agent_m0_byteenable;                 // mode_selector_0_avalon_slave_0_agent:m0_byteenable -> mode_selector_0_avalon_slave_0_translator:uav_byteenable
	wire          mode_selector_0_avalon_slave_0_agent_m0_read;                       // mode_selector_0_avalon_slave_0_agent:m0_read -> mode_selector_0_avalon_slave_0_translator:uav_read
	wire          mode_selector_0_avalon_slave_0_agent_m0_readdatavalid;              // mode_selector_0_avalon_slave_0_translator:uav_readdatavalid -> mode_selector_0_avalon_slave_0_agent:m0_readdatavalid
	wire          mode_selector_0_avalon_slave_0_agent_m0_lock;                       // mode_selector_0_avalon_slave_0_agent:m0_lock -> mode_selector_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] mode_selector_0_avalon_slave_0_agent_m0_writedata;                  // mode_selector_0_avalon_slave_0_agent:m0_writedata -> mode_selector_0_avalon_slave_0_translator:uav_writedata
	wire          mode_selector_0_avalon_slave_0_agent_m0_write;                      // mode_selector_0_avalon_slave_0_agent:m0_write -> mode_selector_0_avalon_slave_0_translator:uav_write
	wire    [2:0] mode_selector_0_avalon_slave_0_agent_m0_burstcount;                 // mode_selector_0_avalon_slave_0_agent:m0_burstcount -> mode_selector_0_avalon_slave_0_translator:uav_burstcount
	wire          mode_selector_0_avalon_slave_0_agent_rf_source_valid;               // mode_selector_0_avalon_slave_0_agent:rf_source_valid -> mode_selector_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [116:0] mode_selector_0_avalon_slave_0_agent_rf_source_data;                // mode_selector_0_avalon_slave_0_agent:rf_source_data -> mode_selector_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          mode_selector_0_avalon_slave_0_agent_rf_source_ready;               // mode_selector_0_avalon_slave_0_agent_rsp_fifo:in_ready -> mode_selector_0_avalon_slave_0_agent:rf_source_ready
	wire          mode_selector_0_avalon_slave_0_agent_rf_source_startofpacket;       // mode_selector_0_avalon_slave_0_agent:rf_source_startofpacket -> mode_selector_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          mode_selector_0_avalon_slave_0_agent_rf_source_endofpacket;         // mode_selector_0_avalon_slave_0_agent:rf_source_endofpacket -> mode_selector_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_valid;            // mode_selector_0_avalon_slave_0_agent_rsp_fifo:out_valid -> mode_selector_0_avalon_slave_0_agent:rf_sink_valid
	wire  [116:0] mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_data;             // mode_selector_0_avalon_slave_0_agent_rsp_fifo:out_data -> mode_selector_0_avalon_slave_0_agent:rf_sink_data
	wire          mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_ready;            // mode_selector_0_avalon_slave_0_agent:rf_sink_ready -> mode_selector_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;    // mode_selector_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> mode_selector_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;      // mode_selector_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> mode_selector_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_valid;          // mode_selector_0_avalon_slave_0_agent:rdata_fifo_src_valid -> mode_selector_0_avalon_slave_0_agent_rdata_fifo:in_valid
	wire   [33:0] mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_data;           // mode_selector_0_avalon_slave_0_agent:rdata_fifo_src_data -> mode_selector_0_avalon_slave_0_agent_rdata_fifo:in_data
	wire          mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_ready;          // mode_selector_0_avalon_slave_0_agent_rdata_fifo:in_ready -> mode_selector_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_valid;                       // hps_0_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [115:0] hps_0_h2f_lw_axi_master_agent_write_cp_data;                        // hps_0_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_ready;                       // router:sink_ready -> hps_0_h2f_lw_axi_master_agent:write_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket;               // hps_0_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket;                 // hps_0_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_valid;                        // hps_0_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [115:0] hps_0_h2f_lw_axi_master_agent_read_cp_data;                         // hps_0_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_ready;                        // router_001:sink_ready -> hps_0_h2f_lw_axi_master_agent:read_cp_ready
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket;                // hps_0_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket;                  // hps_0_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          delta_timer_0_avs_agent_rp_valid;                                   // delta_timer_0_AVS_agent:rp_valid -> router_002:sink_valid
	wire  [115:0] delta_timer_0_avs_agent_rp_data;                                    // delta_timer_0_AVS_agent:rp_data -> router_002:sink_data
	wire          delta_timer_0_avs_agent_rp_ready;                                   // router_002:sink_ready -> delta_timer_0_AVS_agent:rp_ready
	wire          delta_timer_0_avs_agent_rp_startofpacket;                           // delta_timer_0_AVS_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          delta_timer_0_avs_agent_rp_endofpacket;                             // delta_timer_0_AVS_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire  [115:0] router_002_src_data;                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire    [6:0] router_002_src_channel;                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          clk_gen_0_avs_agent_rp_valid;                                       // clk_gen_0_AVS_agent:rp_valid -> router_003:sink_valid
	wire  [115:0] clk_gen_0_avs_agent_rp_data;                                        // clk_gen_0_AVS_agent:rp_data -> router_003:sink_data
	wire          clk_gen_0_avs_agent_rp_ready;                                       // router_003:sink_ready -> clk_gen_0_AVS_agent:rp_ready
	wire          clk_gen_0_avs_agent_rp_startofpacket;                               // clk_gen_0_AVS_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          clk_gen_0_avs_agent_rp_endofpacket;                                 // clk_gen_0_AVS_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [115:0] router_003_src_data;                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire    [6:0] router_003_src_channel;                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          rstn_gen_0_avs_agent_rp_valid;                                      // rstn_gen_0_AVS_agent:rp_valid -> router_004:sink_valid
	wire  [115:0] rstn_gen_0_avs_agent_rp_data;                                       // rstn_gen_0_AVS_agent:rp_data -> router_004:sink_data
	wire          rstn_gen_0_avs_agent_rp_ready;                                      // router_004:sink_ready -> rstn_gen_0_AVS_agent:rp_ready
	wire          rstn_gen_0_avs_agent_rp_startofpacket;                              // rstn_gen_0_AVS_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          rstn_gen_0_avs_agent_rp_endofpacket;                                // rstn_gen_0_AVS_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [115:0] router_004_src_data;                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire    [6:0] router_004_src_channel;                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          re_det_0_avalon_slave_0_agent_rp_valid;                             // re_det_0_avalon_slave_0_agent:rp_valid -> router_005:sink_valid
	wire  [115:0] re_det_0_avalon_slave_0_agent_rp_data;                              // re_det_0_avalon_slave_0_agent:rp_data -> router_005:sink_data
	wire          re_det_0_avalon_slave_0_agent_rp_ready;                             // router_005:sink_ready -> re_det_0_avalon_slave_0_agent:rp_ready
	wire          re_det_0_avalon_slave_0_agent_rp_startofpacket;                     // re_det_0_avalon_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          re_det_0_avalon_slave_0_agent_rp_endofpacket;                       // re_det_0_avalon_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [115:0] router_005_src_data;                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire    [6:0] router_005_src_channel;                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          fifo_snk_0_avalon_slave_0_agent_rp_valid;                           // fifo_snk_0_avalon_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [115:0] fifo_snk_0_avalon_slave_0_agent_rp_data;                            // fifo_snk_0_avalon_slave_0_agent:rp_data -> router_006:sink_data
	wire          fifo_snk_0_avalon_slave_0_agent_rp_ready;                           // router_006:sink_ready -> fifo_snk_0_avalon_slave_0_agent:rp_ready
	wire          fifo_snk_0_avalon_slave_0_agent_rp_startofpacket;                   // fifo_snk_0_avalon_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          fifo_snk_0_avalon_slave_0_agent_rp_endofpacket;                     // fifo_snk_0_avalon_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [115:0] router_006_src_data;                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire    [6:0] router_006_src_channel;                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          dct_2d_ip_0_avalon_slave_0_agent_rp_valid;                          // dct_2d_ip_0_avalon_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [115:0] dct_2d_ip_0_avalon_slave_0_agent_rp_data;                           // dct_2d_ip_0_avalon_slave_0_agent:rp_data -> router_007:sink_data
	wire          dct_2d_ip_0_avalon_slave_0_agent_rp_ready;                          // router_007:sink_ready -> dct_2d_ip_0_avalon_slave_0_agent:rp_ready
	wire          dct_2d_ip_0_avalon_slave_0_agent_rp_startofpacket;                  // dct_2d_ip_0_avalon_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          dct_2d_ip_0_avalon_slave_0_agent_rp_endofpacket;                    // dct_2d_ip_0_avalon_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [115:0] router_007_src_data;                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire    [6:0] router_007_src_channel;                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          mode_selector_0_avalon_slave_0_agent_rp_valid;                      // mode_selector_0_avalon_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [115:0] mode_selector_0_avalon_slave_0_agent_rp_data;                       // mode_selector_0_avalon_slave_0_agent:rp_data -> router_008:sink_data
	wire          mode_selector_0_avalon_slave_0_agent_rp_ready;                      // router_008:sink_ready -> mode_selector_0_avalon_slave_0_agent:rp_ready
	wire          mode_selector_0_avalon_slave_0_agent_rp_startofpacket;              // mode_selector_0_avalon_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          mode_selector_0_avalon_slave_0_agent_rp_endofpacket;                // mode_selector_0_avalon_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [115:0] router_008_src_data;                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire    [6:0] router_008_src_channel;                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_src_valid;                                                   // router:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [115:0] router_src_data;                                                    // router:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                   // hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire    [6:0] router_src_channel;                                                 // router:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                           // router:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                             // router:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data;                    // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                   // cmd_demux:sink_ready -> hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                 // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;             // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [115:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                  // hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire    [6:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                   // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:write_rp_valid
	wire  [115:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data;                    // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:write_rp_data
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                   // hps_0_h2f_lw_axi_master_agent:write_rp_ready -> hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                 // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:write_rp_channel
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;           // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;             // hps_0_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                               // router_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [115:0] router_001_src_data;                                                // router_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                               // hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [6:0] router_001_src_channel;                                             // router_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                       // router_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                         // router_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [115:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data;                    // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                   // cmd_demux_001:sink_ready -> hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                 // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;             // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                              // rsp_mux_001:src_valid -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [115:0] rsp_mux_001_src_data;                                               // rsp_mux_001:src_data -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                              // hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire    [6:0] rsp_mux_001_src_channel;                                            // rsp_mux_001:src_channel -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                      // rsp_mux_001:src_startofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                        // rsp_mux_001:src_endofpacket -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                   // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> hps_0_h2f_lw_axi_master_agent:read_rp_valid
	wire  [115:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data;                    // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_data -> hps_0_h2f_lw_axi_master_agent:read_rp_data
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                   // hps_0_h2f_lw_axi_master_agent:read_rp_ready -> hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire    [6:0] hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                 // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> hps_0_h2f_lw_axi_master_agent:read_rp_channel
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;           // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;             // hps_0_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> hps_0_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> delta_timer_0_AVS_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> delta_timer_0_AVS_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                  // delta_timer_0_AVS_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [6:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> delta_timer_0_AVS_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> delta_timer_0_AVS_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> delta_timer_0_AVS_burst_adapter:sink0_endofpacket
	wire          delta_timer_0_avs_burst_adapter_source0_valid;                      // delta_timer_0_AVS_burst_adapter:source0_valid -> delta_timer_0_AVS_agent:cp_valid
	wire  [115:0] delta_timer_0_avs_burst_adapter_source0_data;                       // delta_timer_0_AVS_burst_adapter:source0_data -> delta_timer_0_AVS_agent:cp_data
	wire          delta_timer_0_avs_burst_adapter_source0_ready;                      // delta_timer_0_AVS_agent:cp_ready -> delta_timer_0_AVS_burst_adapter:source0_ready
	wire    [6:0] delta_timer_0_avs_burst_adapter_source0_channel;                    // delta_timer_0_AVS_burst_adapter:source0_channel -> delta_timer_0_AVS_agent:cp_channel
	wire          delta_timer_0_avs_burst_adapter_source0_startofpacket;              // delta_timer_0_AVS_burst_adapter:source0_startofpacket -> delta_timer_0_AVS_agent:cp_startofpacket
	wire          delta_timer_0_avs_burst_adapter_source0_endofpacket;                // delta_timer_0_AVS_burst_adapter:source0_endofpacket -> delta_timer_0_AVS_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> clk_gen_0_AVS_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> clk_gen_0_AVS_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                              // clk_gen_0_AVS_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire    [6:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> clk_gen_0_AVS_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> clk_gen_0_AVS_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> clk_gen_0_AVS_burst_adapter:sink0_endofpacket
	wire          clk_gen_0_avs_burst_adapter_source0_valid;                          // clk_gen_0_AVS_burst_adapter:source0_valid -> clk_gen_0_AVS_agent:cp_valid
	wire  [115:0] clk_gen_0_avs_burst_adapter_source0_data;                           // clk_gen_0_AVS_burst_adapter:source0_data -> clk_gen_0_AVS_agent:cp_data
	wire          clk_gen_0_avs_burst_adapter_source0_ready;                          // clk_gen_0_AVS_agent:cp_ready -> clk_gen_0_AVS_burst_adapter:source0_ready
	wire    [6:0] clk_gen_0_avs_burst_adapter_source0_channel;                        // clk_gen_0_AVS_burst_adapter:source0_channel -> clk_gen_0_AVS_agent:cp_channel
	wire          clk_gen_0_avs_burst_adapter_source0_startofpacket;                  // clk_gen_0_AVS_burst_adapter:source0_startofpacket -> clk_gen_0_AVS_agent:cp_startofpacket
	wire          clk_gen_0_avs_burst_adapter_source0_endofpacket;                    // clk_gen_0_AVS_burst_adapter:source0_endofpacket -> clk_gen_0_AVS_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> rstn_gen_0_AVS_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> rstn_gen_0_AVS_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                              // rstn_gen_0_AVS_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [6:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> rstn_gen_0_AVS_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> rstn_gen_0_AVS_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> rstn_gen_0_AVS_burst_adapter:sink0_endofpacket
	wire          rstn_gen_0_avs_burst_adapter_source0_valid;                         // rstn_gen_0_AVS_burst_adapter:source0_valid -> rstn_gen_0_AVS_agent:cp_valid
	wire  [115:0] rstn_gen_0_avs_burst_adapter_source0_data;                          // rstn_gen_0_AVS_burst_adapter:source0_data -> rstn_gen_0_AVS_agent:cp_data
	wire          rstn_gen_0_avs_burst_adapter_source0_ready;                         // rstn_gen_0_AVS_agent:cp_ready -> rstn_gen_0_AVS_burst_adapter:source0_ready
	wire    [6:0] rstn_gen_0_avs_burst_adapter_source0_channel;                       // rstn_gen_0_AVS_burst_adapter:source0_channel -> rstn_gen_0_AVS_agent:cp_channel
	wire          rstn_gen_0_avs_burst_adapter_source0_startofpacket;                 // rstn_gen_0_AVS_burst_adapter:source0_startofpacket -> rstn_gen_0_AVS_agent:cp_startofpacket
	wire          rstn_gen_0_avs_burst_adapter_source0_endofpacket;                   // rstn_gen_0_AVS_burst_adapter:source0_endofpacket -> rstn_gen_0_AVS_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                              // cmd_mux_003:src_valid -> re_det_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_003_src_data;                                               // cmd_mux_003:src_data -> re_det_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                              // re_det_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [6:0] cmd_mux_003_src_channel;                                            // cmd_mux_003:src_channel -> re_det_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                      // cmd_mux_003:src_startofpacket -> re_det_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                        // cmd_mux_003:src_endofpacket -> re_det_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          re_det_0_avalon_slave_0_burst_adapter_source0_valid;                // re_det_0_avalon_slave_0_burst_adapter:source0_valid -> re_det_0_avalon_slave_0_agent:cp_valid
	wire  [115:0] re_det_0_avalon_slave_0_burst_adapter_source0_data;                 // re_det_0_avalon_slave_0_burst_adapter:source0_data -> re_det_0_avalon_slave_0_agent:cp_data
	wire          re_det_0_avalon_slave_0_burst_adapter_source0_ready;                // re_det_0_avalon_slave_0_agent:cp_ready -> re_det_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [6:0] re_det_0_avalon_slave_0_burst_adapter_source0_channel;              // re_det_0_avalon_slave_0_burst_adapter:source0_channel -> re_det_0_avalon_slave_0_agent:cp_channel
	wire          re_det_0_avalon_slave_0_burst_adapter_source0_startofpacket;        // re_det_0_avalon_slave_0_burst_adapter:source0_startofpacket -> re_det_0_avalon_slave_0_agent:cp_startofpacket
	wire          re_det_0_avalon_slave_0_burst_adapter_source0_endofpacket;          // re_det_0_avalon_slave_0_burst_adapter:source0_endofpacket -> re_det_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                              // cmd_mux_004:src_valid -> fifo_snk_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_004_src_data;                                               // cmd_mux_004:src_data -> fifo_snk_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                              // fifo_snk_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [6:0] cmd_mux_004_src_channel;                                            // cmd_mux_004:src_channel -> fifo_snk_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                      // cmd_mux_004:src_startofpacket -> fifo_snk_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                        // cmd_mux_004:src_endofpacket -> fifo_snk_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          fifo_snk_0_avalon_slave_0_burst_adapter_source0_valid;              // fifo_snk_0_avalon_slave_0_burst_adapter:source0_valid -> fifo_snk_0_avalon_slave_0_agent:cp_valid
	wire  [115:0] fifo_snk_0_avalon_slave_0_burst_adapter_source0_data;               // fifo_snk_0_avalon_slave_0_burst_adapter:source0_data -> fifo_snk_0_avalon_slave_0_agent:cp_data
	wire          fifo_snk_0_avalon_slave_0_burst_adapter_source0_ready;              // fifo_snk_0_avalon_slave_0_agent:cp_ready -> fifo_snk_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [6:0] fifo_snk_0_avalon_slave_0_burst_adapter_source0_channel;            // fifo_snk_0_avalon_slave_0_burst_adapter:source0_channel -> fifo_snk_0_avalon_slave_0_agent:cp_channel
	wire          fifo_snk_0_avalon_slave_0_burst_adapter_source0_startofpacket;      // fifo_snk_0_avalon_slave_0_burst_adapter:source0_startofpacket -> fifo_snk_0_avalon_slave_0_agent:cp_startofpacket
	wire          fifo_snk_0_avalon_slave_0_burst_adapter_source0_endofpacket;        // fifo_snk_0_avalon_slave_0_burst_adapter:source0_endofpacket -> fifo_snk_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                              // cmd_mux_005:src_valid -> dct_2d_ip_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_005_src_data;                                               // cmd_mux_005:src_data -> dct_2d_ip_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                              // dct_2d_ip_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire    [6:0] cmd_mux_005_src_channel;                                            // cmd_mux_005:src_channel -> dct_2d_ip_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                      // cmd_mux_005:src_startofpacket -> dct_2d_ip_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                        // cmd_mux_005:src_endofpacket -> dct_2d_ip_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_valid;             // dct_2d_ip_0_avalon_slave_0_burst_adapter:source0_valid -> dct_2d_ip_0_avalon_slave_0_agent:cp_valid
	wire  [115:0] dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_data;              // dct_2d_ip_0_avalon_slave_0_burst_adapter:source0_data -> dct_2d_ip_0_avalon_slave_0_agent:cp_data
	wire          dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_ready;             // dct_2d_ip_0_avalon_slave_0_agent:cp_ready -> dct_2d_ip_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [6:0] dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_channel;           // dct_2d_ip_0_avalon_slave_0_burst_adapter:source0_channel -> dct_2d_ip_0_avalon_slave_0_agent:cp_channel
	wire          dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_startofpacket;     // dct_2d_ip_0_avalon_slave_0_burst_adapter:source0_startofpacket -> dct_2d_ip_0_avalon_slave_0_agent:cp_startofpacket
	wire          dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_endofpacket;       // dct_2d_ip_0_avalon_slave_0_burst_adapter:source0_endofpacket -> dct_2d_ip_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                              // cmd_mux_006:src_valid -> mode_selector_0_avalon_slave_0_burst_adapter:sink0_valid
	wire  [115:0] cmd_mux_006_src_data;                                               // cmd_mux_006:src_data -> mode_selector_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                              // mode_selector_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [6:0] cmd_mux_006_src_channel;                                            // cmd_mux_006:src_channel -> mode_selector_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                      // cmd_mux_006:src_startofpacket -> mode_selector_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                        // cmd_mux_006:src_endofpacket -> mode_selector_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          mode_selector_0_avalon_slave_0_burst_adapter_source0_valid;         // mode_selector_0_avalon_slave_0_burst_adapter:source0_valid -> mode_selector_0_avalon_slave_0_agent:cp_valid
	wire  [115:0] mode_selector_0_avalon_slave_0_burst_adapter_source0_data;          // mode_selector_0_avalon_slave_0_burst_adapter:source0_data -> mode_selector_0_avalon_slave_0_agent:cp_data
	wire          mode_selector_0_avalon_slave_0_burst_adapter_source0_ready;         // mode_selector_0_avalon_slave_0_agent:cp_ready -> mode_selector_0_avalon_slave_0_burst_adapter:source0_ready
	wire    [6:0] mode_selector_0_avalon_slave_0_burst_adapter_source0_channel;       // mode_selector_0_avalon_slave_0_burst_adapter:source0_channel -> mode_selector_0_avalon_slave_0_agent:cp_channel
	wire          mode_selector_0_avalon_slave_0_burst_adapter_source0_startofpacket; // mode_selector_0_avalon_slave_0_burst_adapter:source0_startofpacket -> mode_selector_0_avalon_slave_0_agent:cp_startofpacket
	wire          mode_selector_0_avalon_slave_0_burst_adapter_source0_endofpacket;   // mode_selector_0_avalon_slave_0_burst_adapter:source0_endofpacket -> mode_selector_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [115:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                               // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire    [6:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [115:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire    [6:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                           // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [115:0] cmd_demux_001_src1_data;                                            // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                           // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire    [6:0] cmd_demux_001_src1_channel;                                         // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                   // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                     // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                           // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [115:0] cmd_demux_001_src2_data;                                            // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                           // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire    [6:0] cmd_demux_001_src2_channel;                                         // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                   // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                     // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [115:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                           // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire    [6:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                           // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [115:0] rsp_demux_001_src1_data;                                            // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                           // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire    [6:0] rsp_demux_001_src1_channel;                                         // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                   // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                     // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [115:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire    [6:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                           // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [115:0] rsp_demux_002_src1_data;                                            // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                           // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire    [6:0] rsp_demux_002_src1_channel;                                         // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                   // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                     // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> crosser:in_valid
	wire  [115:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                               // crosser:in_ready -> cmd_demux:src0_ready
	wire    [6:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                  // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [115:0] crosser_out_data;                                                   // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                  // cmd_mux:sink0_ready -> crosser:out_ready
	wire    [6:0] crosser_out_channel;                                                // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                          // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                            // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                               // cmd_demux:src3_valid -> crosser_001:in_valid
	wire  [115:0] cmd_demux_src3_data;                                                // cmd_demux:src3_data -> crosser_001:in_data
	wire          cmd_demux_src3_ready;                                               // crosser_001:in_ready -> cmd_demux:src3_ready
	wire    [6:0] cmd_demux_src3_channel;                                             // cmd_demux:src3_channel -> crosser_001:in_channel
	wire          cmd_demux_src3_startofpacket;                                       // cmd_demux:src3_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                         // cmd_demux:src3_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                              // crosser_001:out_valid -> cmd_mux_003:sink0_valid
	wire  [115:0] crosser_001_out_data;                                               // crosser_001:out_data -> cmd_mux_003:sink0_data
	wire          crosser_001_out_ready;                                              // cmd_mux_003:sink0_ready -> crosser_001:out_ready
	wire    [6:0] crosser_001_out_channel;                                            // crosser_001:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_001_out_startofpacket;                                      // crosser_001:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          crosser_001_out_endofpacket;                                        // crosser_001:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                               // cmd_demux:src4_valid -> crosser_002:in_valid
	wire  [115:0] cmd_demux_src4_data;                                                // cmd_demux:src4_data -> crosser_002:in_data
	wire          cmd_demux_src4_ready;                                               // crosser_002:in_ready -> cmd_demux:src4_ready
	wire    [6:0] cmd_demux_src4_channel;                                             // cmd_demux:src4_channel -> crosser_002:in_channel
	wire          cmd_demux_src4_startofpacket;                                       // cmd_demux:src4_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                         // cmd_demux:src4_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                              // crosser_002:out_valid -> cmd_mux_004:sink0_valid
	wire  [115:0] crosser_002_out_data;                                               // crosser_002:out_data -> cmd_mux_004:sink0_data
	wire          crosser_002_out_ready;                                              // cmd_mux_004:sink0_ready -> crosser_002:out_ready
	wire    [6:0] crosser_002_out_channel;                                            // crosser_002:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_002_out_startofpacket;                                      // crosser_002:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                        // crosser_002:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                               // cmd_demux:src5_valid -> crosser_003:in_valid
	wire  [115:0] cmd_demux_src5_data;                                                // cmd_demux:src5_data -> crosser_003:in_data
	wire          cmd_demux_src5_ready;                                               // crosser_003:in_ready -> cmd_demux:src5_ready
	wire    [6:0] cmd_demux_src5_channel;                                             // cmd_demux:src5_channel -> crosser_003:in_channel
	wire          cmd_demux_src5_startofpacket;                                       // cmd_demux:src5_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                         // cmd_demux:src5_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                              // crosser_003:out_valid -> cmd_mux_005:sink0_valid
	wire  [115:0] crosser_003_out_data;                                               // crosser_003:out_data -> cmd_mux_005:sink0_data
	wire          crosser_003_out_ready;                                              // cmd_mux_005:sink0_ready -> crosser_003:out_ready
	wire    [6:0] crosser_003_out_channel;                                            // crosser_003:out_channel -> cmd_mux_005:sink0_channel
	wire          crosser_003_out_startofpacket;                                      // crosser_003:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          crosser_003_out_endofpacket;                                        // crosser_003:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                               // cmd_demux:src6_valid -> crosser_004:in_valid
	wire  [115:0] cmd_demux_src6_data;                                                // cmd_demux:src6_data -> crosser_004:in_data
	wire          cmd_demux_src6_ready;                                               // crosser_004:in_ready -> cmd_demux:src6_ready
	wire    [6:0] cmd_demux_src6_channel;                                             // cmd_demux:src6_channel -> crosser_004:in_channel
	wire          cmd_demux_src6_startofpacket;                                       // cmd_demux:src6_startofpacket -> crosser_004:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                         // cmd_demux:src6_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                              // crosser_004:out_valid -> cmd_mux_006:sink0_valid
	wire  [115:0] crosser_004_out_data;                                               // crosser_004:out_data -> cmd_mux_006:sink0_data
	wire          crosser_004_out_ready;                                              // cmd_mux_006:sink0_ready -> crosser_004:out_ready
	wire    [6:0] crosser_004_out_channel;                                            // crosser_004:out_channel -> cmd_mux_006:sink0_channel
	wire          crosser_004_out_startofpacket;                                      // crosser_004:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                        // crosser_004:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                           // cmd_demux_001:src0_valid -> crosser_005:in_valid
	wire  [115:0] cmd_demux_001_src0_data;                                            // cmd_demux_001:src0_data -> crosser_005:in_data
	wire          cmd_demux_001_src0_ready;                                           // crosser_005:in_ready -> cmd_demux_001:src0_ready
	wire    [6:0] cmd_demux_001_src0_channel;                                         // cmd_demux_001:src0_channel -> crosser_005:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                   // cmd_demux_001:src0_startofpacket -> crosser_005:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                     // cmd_demux_001:src0_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                              // crosser_005:out_valid -> cmd_mux:sink1_valid
	wire  [115:0] crosser_005_out_data;                                               // crosser_005:out_data -> cmd_mux:sink1_data
	wire          crosser_005_out_ready;                                              // cmd_mux:sink1_ready -> crosser_005:out_ready
	wire    [6:0] crosser_005_out_channel;                                            // crosser_005:out_channel -> cmd_mux:sink1_channel
	wire          crosser_005_out_startofpacket;                                      // crosser_005:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_005_out_endofpacket;                                        // crosser_005:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                           // cmd_demux_001:src3_valid -> crosser_006:in_valid
	wire  [115:0] cmd_demux_001_src3_data;                                            // cmd_demux_001:src3_data -> crosser_006:in_data
	wire          cmd_demux_001_src3_ready;                                           // crosser_006:in_ready -> cmd_demux_001:src3_ready
	wire    [6:0] cmd_demux_001_src3_channel;                                         // cmd_demux_001:src3_channel -> crosser_006:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                   // cmd_demux_001:src3_startofpacket -> crosser_006:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                     // cmd_demux_001:src3_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                              // crosser_006:out_valid -> cmd_mux_003:sink1_valid
	wire  [115:0] crosser_006_out_data;                                               // crosser_006:out_data -> cmd_mux_003:sink1_data
	wire          crosser_006_out_ready;                                              // cmd_mux_003:sink1_ready -> crosser_006:out_ready
	wire    [6:0] crosser_006_out_channel;                                            // crosser_006:out_channel -> cmd_mux_003:sink1_channel
	wire          crosser_006_out_startofpacket;                                      // crosser_006:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          crosser_006_out_endofpacket;                                        // crosser_006:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                           // cmd_demux_001:src4_valid -> crosser_007:in_valid
	wire  [115:0] cmd_demux_001_src4_data;                                            // cmd_demux_001:src4_data -> crosser_007:in_data
	wire          cmd_demux_001_src4_ready;                                           // crosser_007:in_ready -> cmd_demux_001:src4_ready
	wire    [6:0] cmd_demux_001_src4_channel;                                         // cmd_demux_001:src4_channel -> crosser_007:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                   // cmd_demux_001:src4_startofpacket -> crosser_007:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                     // cmd_demux_001:src4_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                              // crosser_007:out_valid -> cmd_mux_004:sink1_valid
	wire  [115:0] crosser_007_out_data;                                               // crosser_007:out_data -> cmd_mux_004:sink1_data
	wire          crosser_007_out_ready;                                              // cmd_mux_004:sink1_ready -> crosser_007:out_ready
	wire    [6:0] crosser_007_out_channel;                                            // crosser_007:out_channel -> cmd_mux_004:sink1_channel
	wire          crosser_007_out_startofpacket;                                      // crosser_007:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          crosser_007_out_endofpacket;                                        // crosser_007:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                           // cmd_demux_001:src5_valid -> crosser_008:in_valid
	wire  [115:0] cmd_demux_001_src5_data;                                            // cmd_demux_001:src5_data -> crosser_008:in_data
	wire          cmd_demux_001_src5_ready;                                           // crosser_008:in_ready -> cmd_demux_001:src5_ready
	wire    [6:0] cmd_demux_001_src5_channel;                                         // cmd_demux_001:src5_channel -> crosser_008:in_channel
	wire          cmd_demux_001_src5_startofpacket;                                   // cmd_demux_001:src5_startofpacket -> crosser_008:in_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                     // cmd_demux_001:src5_endofpacket -> crosser_008:in_endofpacket
	wire          crosser_008_out_valid;                                              // crosser_008:out_valid -> cmd_mux_005:sink1_valid
	wire  [115:0] crosser_008_out_data;                                               // crosser_008:out_data -> cmd_mux_005:sink1_data
	wire          crosser_008_out_ready;                                              // cmd_mux_005:sink1_ready -> crosser_008:out_ready
	wire    [6:0] crosser_008_out_channel;                                            // crosser_008:out_channel -> cmd_mux_005:sink1_channel
	wire          crosser_008_out_startofpacket;                                      // crosser_008:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          crosser_008_out_endofpacket;                                        // crosser_008:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                           // cmd_demux_001:src6_valid -> crosser_009:in_valid
	wire  [115:0] cmd_demux_001_src6_data;                                            // cmd_demux_001:src6_data -> crosser_009:in_data
	wire          cmd_demux_001_src6_ready;                                           // crosser_009:in_ready -> cmd_demux_001:src6_ready
	wire    [6:0] cmd_demux_001_src6_channel;                                         // cmd_demux_001:src6_channel -> crosser_009:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                   // cmd_demux_001:src6_startofpacket -> crosser_009:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                     // cmd_demux_001:src6_endofpacket -> crosser_009:in_endofpacket
	wire          crosser_009_out_valid;                                              // crosser_009:out_valid -> cmd_mux_006:sink1_valid
	wire  [115:0] crosser_009_out_data;                                               // crosser_009:out_data -> cmd_mux_006:sink1_data
	wire          crosser_009_out_ready;                                              // cmd_mux_006:sink1_ready -> crosser_009:out_ready
	wire    [6:0] crosser_009_out_channel;                                            // crosser_009:out_channel -> cmd_mux_006:sink1_channel
	wire          crosser_009_out_startofpacket;                                      // crosser_009:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          crosser_009_out_endofpacket;                                        // crosser_009:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> crosser_010:in_valid
	wire  [115:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> crosser_010:in_data
	wire          rsp_demux_src0_ready;                                               // crosser_010:in_ready -> rsp_demux:src0_ready
	wire    [6:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> crosser_010:in_channel
	wire          rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> crosser_010:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> crosser_010:in_endofpacket
	wire          crosser_010_out_valid;                                              // crosser_010:out_valid -> rsp_mux:sink0_valid
	wire  [115:0] crosser_010_out_data;                                               // crosser_010:out_data -> rsp_mux:sink0_data
	wire          crosser_010_out_ready;                                              // rsp_mux:sink0_ready -> crosser_010:out_ready
	wire    [6:0] crosser_010_out_channel;                                            // crosser_010:out_channel -> rsp_mux:sink0_channel
	wire          crosser_010_out_startofpacket;                                      // crosser_010:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_010_out_endofpacket;                                        // crosser_010:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                               // rsp_demux:src1_valid -> crosser_011:in_valid
	wire  [115:0] rsp_demux_src1_data;                                                // rsp_demux:src1_data -> crosser_011:in_data
	wire          rsp_demux_src1_ready;                                               // crosser_011:in_ready -> rsp_demux:src1_ready
	wire    [6:0] rsp_demux_src1_channel;                                             // rsp_demux:src1_channel -> crosser_011:in_channel
	wire          rsp_demux_src1_startofpacket;                                       // rsp_demux:src1_startofpacket -> crosser_011:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                         // rsp_demux:src1_endofpacket -> crosser_011:in_endofpacket
	wire          crosser_011_out_valid;                                              // crosser_011:out_valid -> rsp_mux_001:sink0_valid
	wire  [115:0] crosser_011_out_data;                                               // crosser_011:out_data -> rsp_mux_001:sink0_data
	wire          crosser_011_out_ready;                                              // rsp_mux_001:sink0_ready -> crosser_011:out_ready
	wire    [6:0] crosser_011_out_channel;                                            // crosser_011:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_011_out_startofpacket;                                      // crosser_011:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_011_out_endofpacket;                                        // crosser_011:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_003_src0_valid;                                           // rsp_demux_003:src0_valid -> crosser_012:in_valid
	wire  [115:0] rsp_demux_003_src0_data;                                            // rsp_demux_003:src0_data -> crosser_012:in_data
	wire          rsp_demux_003_src0_ready;                                           // crosser_012:in_ready -> rsp_demux_003:src0_ready
	wire    [6:0] rsp_demux_003_src0_channel;                                         // rsp_demux_003:src0_channel -> crosser_012:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                   // rsp_demux_003:src0_startofpacket -> crosser_012:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                     // rsp_demux_003:src0_endofpacket -> crosser_012:in_endofpacket
	wire          crosser_012_out_valid;                                              // crosser_012:out_valid -> rsp_mux:sink3_valid
	wire  [115:0] crosser_012_out_data;                                               // crosser_012:out_data -> rsp_mux:sink3_data
	wire          crosser_012_out_ready;                                              // rsp_mux:sink3_ready -> crosser_012:out_ready
	wire    [6:0] crosser_012_out_channel;                                            // crosser_012:out_channel -> rsp_mux:sink3_channel
	wire          crosser_012_out_startofpacket;                                      // crosser_012:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          crosser_012_out_endofpacket;                                        // crosser_012:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                           // rsp_demux_003:src1_valid -> crosser_013:in_valid
	wire  [115:0] rsp_demux_003_src1_data;                                            // rsp_demux_003:src1_data -> crosser_013:in_data
	wire          rsp_demux_003_src1_ready;                                           // crosser_013:in_ready -> rsp_demux_003:src1_ready
	wire    [6:0] rsp_demux_003_src1_channel;                                         // rsp_demux_003:src1_channel -> crosser_013:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                   // rsp_demux_003:src1_startofpacket -> crosser_013:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                     // rsp_demux_003:src1_endofpacket -> crosser_013:in_endofpacket
	wire          crosser_013_out_valid;                                              // crosser_013:out_valid -> rsp_mux_001:sink3_valid
	wire  [115:0] crosser_013_out_data;                                               // crosser_013:out_data -> rsp_mux_001:sink3_data
	wire          crosser_013_out_ready;                                              // rsp_mux_001:sink3_ready -> crosser_013:out_ready
	wire    [6:0] crosser_013_out_channel;                                            // crosser_013:out_channel -> rsp_mux_001:sink3_channel
	wire          crosser_013_out_startofpacket;                                      // crosser_013:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          crosser_013_out_endofpacket;                                        // crosser_013:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                           // rsp_demux_004:src0_valid -> crosser_014:in_valid
	wire  [115:0] rsp_demux_004_src0_data;                                            // rsp_demux_004:src0_data -> crosser_014:in_data
	wire          rsp_demux_004_src0_ready;                                           // crosser_014:in_ready -> rsp_demux_004:src0_ready
	wire    [6:0] rsp_demux_004_src0_channel;                                         // rsp_demux_004:src0_channel -> crosser_014:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                   // rsp_demux_004:src0_startofpacket -> crosser_014:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                     // rsp_demux_004:src0_endofpacket -> crosser_014:in_endofpacket
	wire          crosser_014_out_valid;                                              // crosser_014:out_valid -> rsp_mux:sink4_valid
	wire  [115:0] crosser_014_out_data;                                               // crosser_014:out_data -> rsp_mux:sink4_data
	wire          crosser_014_out_ready;                                              // rsp_mux:sink4_ready -> crosser_014:out_ready
	wire    [6:0] crosser_014_out_channel;                                            // crosser_014:out_channel -> rsp_mux:sink4_channel
	wire          crosser_014_out_startofpacket;                                      // crosser_014:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          crosser_014_out_endofpacket;                                        // crosser_014:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                           // rsp_demux_004:src1_valid -> crosser_015:in_valid
	wire  [115:0] rsp_demux_004_src1_data;                                            // rsp_demux_004:src1_data -> crosser_015:in_data
	wire          rsp_demux_004_src1_ready;                                           // crosser_015:in_ready -> rsp_demux_004:src1_ready
	wire    [6:0] rsp_demux_004_src1_channel;                                         // rsp_demux_004:src1_channel -> crosser_015:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                   // rsp_demux_004:src1_startofpacket -> crosser_015:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                     // rsp_demux_004:src1_endofpacket -> crosser_015:in_endofpacket
	wire          crosser_015_out_valid;                                              // crosser_015:out_valid -> rsp_mux_001:sink4_valid
	wire  [115:0] crosser_015_out_data;                                               // crosser_015:out_data -> rsp_mux_001:sink4_data
	wire          crosser_015_out_ready;                                              // rsp_mux_001:sink4_ready -> crosser_015:out_ready
	wire    [6:0] crosser_015_out_channel;                                            // crosser_015:out_channel -> rsp_mux_001:sink4_channel
	wire          crosser_015_out_startofpacket;                                      // crosser_015:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          crosser_015_out_endofpacket;                                        // crosser_015:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                           // rsp_demux_005:src0_valid -> crosser_016:in_valid
	wire  [115:0] rsp_demux_005_src0_data;                                            // rsp_demux_005:src0_data -> crosser_016:in_data
	wire          rsp_demux_005_src0_ready;                                           // crosser_016:in_ready -> rsp_demux_005:src0_ready
	wire    [6:0] rsp_demux_005_src0_channel;                                         // rsp_demux_005:src0_channel -> crosser_016:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                   // rsp_demux_005:src0_startofpacket -> crosser_016:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                     // rsp_demux_005:src0_endofpacket -> crosser_016:in_endofpacket
	wire          crosser_016_out_valid;                                              // crosser_016:out_valid -> rsp_mux:sink5_valid
	wire  [115:0] crosser_016_out_data;                                               // crosser_016:out_data -> rsp_mux:sink5_data
	wire          crosser_016_out_ready;                                              // rsp_mux:sink5_ready -> crosser_016:out_ready
	wire    [6:0] crosser_016_out_channel;                                            // crosser_016:out_channel -> rsp_mux:sink5_channel
	wire          crosser_016_out_startofpacket;                                      // crosser_016:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          crosser_016_out_endofpacket;                                        // crosser_016:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                           // rsp_demux_005:src1_valid -> crosser_017:in_valid
	wire  [115:0] rsp_demux_005_src1_data;                                            // rsp_demux_005:src1_data -> crosser_017:in_data
	wire          rsp_demux_005_src1_ready;                                           // crosser_017:in_ready -> rsp_demux_005:src1_ready
	wire    [6:0] rsp_demux_005_src1_channel;                                         // rsp_demux_005:src1_channel -> crosser_017:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                   // rsp_demux_005:src1_startofpacket -> crosser_017:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                     // rsp_demux_005:src1_endofpacket -> crosser_017:in_endofpacket
	wire          crosser_017_out_valid;                                              // crosser_017:out_valid -> rsp_mux_001:sink5_valid
	wire  [115:0] crosser_017_out_data;                                               // crosser_017:out_data -> rsp_mux_001:sink5_data
	wire          crosser_017_out_ready;                                              // rsp_mux_001:sink5_ready -> crosser_017:out_ready
	wire    [6:0] crosser_017_out_channel;                                            // crosser_017:out_channel -> rsp_mux_001:sink5_channel
	wire          crosser_017_out_startofpacket;                                      // crosser_017:out_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          crosser_017_out_endofpacket;                                        // crosser_017:out_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                           // rsp_demux_006:src0_valid -> crosser_018:in_valid
	wire  [115:0] rsp_demux_006_src0_data;                                            // rsp_demux_006:src0_data -> crosser_018:in_data
	wire          rsp_demux_006_src0_ready;                                           // crosser_018:in_ready -> rsp_demux_006:src0_ready
	wire    [6:0] rsp_demux_006_src0_channel;                                         // rsp_demux_006:src0_channel -> crosser_018:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                   // rsp_demux_006:src0_startofpacket -> crosser_018:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                     // rsp_demux_006:src0_endofpacket -> crosser_018:in_endofpacket
	wire          crosser_018_out_valid;                                              // crosser_018:out_valid -> rsp_mux:sink6_valid
	wire  [115:0] crosser_018_out_data;                                               // crosser_018:out_data -> rsp_mux:sink6_data
	wire          crosser_018_out_ready;                                              // rsp_mux:sink6_ready -> crosser_018:out_ready
	wire    [6:0] crosser_018_out_channel;                                            // crosser_018:out_channel -> rsp_mux:sink6_channel
	wire          crosser_018_out_startofpacket;                                      // crosser_018:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          crosser_018_out_endofpacket;                                        // crosser_018:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                           // rsp_demux_006:src1_valid -> crosser_019:in_valid
	wire  [115:0] rsp_demux_006_src1_data;                                            // rsp_demux_006:src1_data -> crosser_019:in_data
	wire          rsp_demux_006_src1_ready;                                           // crosser_019:in_ready -> rsp_demux_006:src1_ready
	wire    [6:0] rsp_demux_006_src1_channel;                                         // rsp_demux_006:src1_channel -> crosser_019:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                   // rsp_demux_006:src1_startofpacket -> crosser_019:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                     // rsp_demux_006:src1_endofpacket -> crosser_019:in_endofpacket
	wire          crosser_019_out_valid;                                              // crosser_019:out_valid -> rsp_mux_001:sink6_valid
	wire  [115:0] crosser_019_out_data;                                               // crosser_019:out_data -> rsp_mux_001:sink6_data
	wire          crosser_019_out_ready;                                              // rsp_mux_001:sink6_ready -> crosser_019:out_ready
	wire    [6:0] crosser_019_out_channel;                                            // crosser_019:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_019_out_startofpacket;                                      // crosser_019:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_019_out_endofpacket;                                        // crosser_019:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire    [6:0] hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                  // hps_0_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire    [6:0] hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                  // hps_0_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          delta_timer_0_avs_agent_rdata_fifo_out_valid;                       // delta_timer_0_AVS_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] delta_timer_0_avs_agent_rdata_fifo_out_data;                        // delta_timer_0_AVS_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          delta_timer_0_avs_agent_rdata_fifo_out_ready;                       // avalon_st_adapter:in_0_ready -> delta_timer_0_AVS_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> delta_timer_0_AVS_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> delta_timer_0_AVS_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                      // delta_timer_0_AVS_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> delta_timer_0_AVS_agent:rdata_fifo_sink_error
	wire          clk_gen_0_avs_agent_rdata_fifo_out_valid;                           // clk_gen_0_AVS_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] clk_gen_0_avs_agent_rdata_fifo_out_data;                            // clk_gen_0_AVS_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          clk_gen_0_avs_agent_rdata_fifo_out_ready;                           // avalon_st_adapter_001:in_0_ready -> clk_gen_0_AVS_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                  // avalon_st_adapter_001:out_0_valid -> clk_gen_0_AVS_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                   // avalon_st_adapter_001:out_0_data -> clk_gen_0_AVS_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                  // clk_gen_0_AVS_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                  // avalon_st_adapter_001:out_0_error -> clk_gen_0_AVS_agent:rdata_fifo_sink_error
	wire          rstn_gen_0_avs_agent_rdata_fifo_out_valid;                          // rstn_gen_0_AVS_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] rstn_gen_0_avs_agent_rdata_fifo_out_data;                           // rstn_gen_0_AVS_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          rstn_gen_0_avs_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_002:in_0_ready -> rstn_gen_0_AVS_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                  // avalon_st_adapter_002:out_0_valid -> rstn_gen_0_AVS_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                   // avalon_st_adapter_002:out_0_data -> rstn_gen_0_AVS_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                  // rstn_gen_0_AVS_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                  // avalon_st_adapter_002:out_0_error -> rstn_gen_0_AVS_agent:rdata_fifo_sink_error
	wire          re_det_0_avalon_slave_0_agent_rdata_fifo_out_valid;                 // re_det_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] re_det_0_avalon_slave_0_agent_rdata_fifo_out_data;                  // re_det_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          re_det_0_avalon_slave_0_agent_rdata_fifo_out_ready;                 // avalon_st_adapter_003:in_0_ready -> re_det_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                  // avalon_st_adapter_003:out_0_valid -> re_det_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                   // avalon_st_adapter_003:out_0_data -> re_det_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                  // re_det_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                  // avalon_st_adapter_003:out_0_error -> re_det_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_valid;               // fifo_snk_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_data;                // fifo_snk_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_ready;               // avalon_st_adapter_004:in_0_ready -> fifo_snk_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                  // avalon_st_adapter_004:out_0_valid -> fifo_snk_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                   // avalon_st_adapter_004:out_0_data -> fifo_snk_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                  // fifo_snk_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                  // avalon_st_adapter_004:out_0_error -> fifo_snk_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_valid;              // dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_data;               // dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_ready;              // avalon_st_adapter_005:in_0_ready -> dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                  // avalon_st_adapter_005:out_0_valid -> dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                   // avalon_st_adapter_005:out_0_data -> dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                  // dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                  // avalon_st_adapter_005:out_0_error -> dct_2d_ip_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_valid;          // mode_selector_0_avalon_slave_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_data;           // mode_selector_0_avalon_slave_0_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_ready;          // avalon_st_adapter_006:in_0_ready -> mode_selector_0_avalon_slave_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                  // avalon_st_adapter_006:out_0_valid -> mode_selector_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                   // avalon_st_adapter_006:out_0_data -> mode_selector_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                  // mode_selector_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                  // avalon_st_adapter_006:out_0_error -> mode_selector_0_avalon_slave_0_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) delta_timer_0_avs_translator (
		.clk                    (clk_gen_0_clk_out_clk),                           //                      clk.clk
		.reset                  (delta_timer_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (delta_timer_0_avs_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (delta_timer_0_avs_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (delta_timer_0_avs_agent_m0_read),                 //                         .read
		.uav_write              (delta_timer_0_avs_agent_m0_write),                //                         .write
		.uav_waitrequest        (delta_timer_0_avs_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (delta_timer_0_avs_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (delta_timer_0_avs_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (delta_timer_0_avs_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (delta_timer_0_avs_agent_m0_writedata),            //                         .writedata
		.uav_lock               (delta_timer_0_avs_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (delta_timer_0_avs_agent_m0_debugaccess),          //                         .debugaccess
		.av_write               (delta_timer_0_AVS_write),                         //      avalon_anti_slave_0.write
		.av_readdata            (delta_timer_0_AVS_readdata),                      //                         .readdata
		.av_writedata           (delta_timer_0_AVS_writedata),                     //                         .writedata
		.av_address             (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) clk_gen_0_avs_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (clk_gen_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (clk_gen_0_avs_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (clk_gen_0_avs_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (clk_gen_0_avs_agent_m0_read),                 //                         .read
		.uav_write              (clk_gen_0_avs_agent_m0_write),                //                         .write
		.uav_waitrequest        (clk_gen_0_avs_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (clk_gen_0_avs_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (clk_gen_0_avs_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (clk_gen_0_avs_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (clk_gen_0_avs_agent_m0_writedata),            //                         .writedata
		.uav_lock               (clk_gen_0_avs_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (clk_gen_0_avs_agent_m0_debugaccess),          //                         .debugaccess
		.av_write               (clk_gen_0_AVS_write),                         //      avalon_anti_slave_0.write
		.av_readdata            (clk_gen_0_AVS_readdata),                      //                         .readdata
		.av_writedata           (clk_gen_0_AVS_writedata),                     //                         .writedata
		.av_address             (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rstn_gen_0_avs_translator (
		.clk                    (clk_0_clk_clk),                               //                      clk.clk
		.reset                  (clk_gen_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rstn_gen_0_avs_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (rstn_gen_0_avs_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (rstn_gen_0_avs_agent_m0_read),                //                         .read
		.uav_write              (rstn_gen_0_avs_agent_m0_write),               //                         .write
		.uav_waitrequest        (rstn_gen_0_avs_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (rstn_gen_0_avs_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (rstn_gen_0_avs_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (rstn_gen_0_avs_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (rstn_gen_0_avs_agent_m0_writedata),           //                         .writedata
		.uav_lock               (rstn_gen_0_avs_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (rstn_gen_0_avs_agent_m0_debugaccess),         //                         .debugaccess
		.av_write               (rstn_gen_0_AVS_write),                        //      avalon_anti_slave_0.write
		.av_readdata            (rstn_gen_0_AVS_readdata),                     //                         .readdata
		.av_writedata           (rstn_gen_0_AVS_writedata),                    //                         .writedata
		.av_address             (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) re_det_0_avalon_slave_0_translator (
		.clk                    (clk_gen_0_clk_out_clk),                           //                      clk.clk
		.reset                  (delta_timer_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (re_det_0_avalon_slave_0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (re_det_0_avalon_slave_0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (re_det_0_avalon_slave_0_agent_m0_read),           //                         .read
		.uav_write              (re_det_0_avalon_slave_0_agent_m0_write),          //                         .write
		.uav_waitrequest        (re_det_0_avalon_slave_0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (re_det_0_avalon_slave_0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (re_det_0_avalon_slave_0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (re_det_0_avalon_slave_0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (re_det_0_avalon_slave_0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (re_det_0_avalon_slave_0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (re_det_0_avalon_slave_0_agent_m0_debugaccess),    //                         .debugaccess
		.av_write               (re_det_0_avalon_slave_0_write),                   //      avalon_anti_slave_0.write
		.av_readdata            (re_det_0_avalon_slave_0_readdata),                //                         .readdata
		.av_writedata           (re_det_0_avalon_slave_0_writedata),               //                         .writedata
		.av_address             (),                                                //              (terminated)
		.av_read                (),                                                //              (terminated)
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) fifo_snk_0_avalon_slave_0_translator (
		.clk                    (clk_gen_0_clk_out_clk),                            //                      clk.clk
		.reset                  (delta_timer_0_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (fifo_snk_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (fifo_snk_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (fifo_snk_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (fifo_snk_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (fifo_snk_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (fifo_snk_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (fifo_snk_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (fifo_snk_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (fifo_snk_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (fifo_snk_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (fifo_snk_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (fifo_snk_0_avalon_slave_0_write),                  //      avalon_anti_slave_0.write
		.av_read                (fifo_snk_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (fifo_snk_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (fifo_snk_0_avalon_slave_0_writedata),              //                         .writedata
		.av_address             (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dct_2d_ip_0_avalon_slave_0_translator (
		.clk                    (clk_gen_0_clk_out_clk),                             //                      clk.clk
		.reset                  (delta_timer_0_reset_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (dct_2d_ip_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (dct_2d_ip_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (dct_2d_ip_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (dct_2d_ip_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (dct_2d_ip_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (dct_2d_ip_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (dct_2d_ip_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (dct_2d_ip_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (dct_2d_ip_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (dct_2d_ip_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (dct_2d_ip_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (dct_2d_ip_0_avalon_slave_0_write),                  //      avalon_anti_slave_0.write
		.av_writedata           (dct_2d_ip_0_avalon_slave_0_writedata),              //                         .writedata
		.av_address             (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),              //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mode_selector_0_avalon_slave_0_translator (
		.clk                    (clk_gen_0_clk_out_clk),                                 //                      clk.clk
		.reset                  (delta_timer_0_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (mode_selector_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mode_selector_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mode_selector_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (mode_selector_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (mode_selector_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mode_selector_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mode_selector_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mode_selector_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mode_selector_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mode_selector_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mode_selector_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_write               (mode_selector_0_avalon_slave_0_write),                  //      avalon_anti_slave_0.write
		.av_readdata            (mode_selector_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (mode_selector_0_avalon_slave_0_writedata),              //                         .writedata
		.av_address             (),                                                      //              (terminated)
		.av_read                (),                                                      //              (terminated)
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_byteenable          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_waitrequest         (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_debugaccess         (),                                                      //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (92),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.ID                        (0)
	) hps_0_h2f_lw_axi_master_agent (
		.aclk                   (clk_0_clk_clk),                                                        //              clk.clk
		.aresetn                (~hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (hps_0_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (hps_0_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (hps_0_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (hps_0_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (hps_0_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (hps_0_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (hps_0_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (hps_0_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (hps_0_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (hps_0_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (hps_0_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (hps_0_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (hps_0_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (hps_0_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (hps_0_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (hps_0_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (hps_0_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (hps_0_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (hps_0_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (hps_0_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (hps_0_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (hps_0_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (hps_0_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (hps_0_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (hps_0_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (hps_0_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (hps_0_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (hps_0_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (hps_0_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (hps_0_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (hps_0_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (hps_0_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (hps_0_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (hps_0_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (hps_0_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (hps_0_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (hps_0_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                 //      (terminated)
		.aruser                 (1'b0),                                                                 //      (terminated)
		.awqos                  (4'b0000),                                                              //      (terminated)
		.arqos                  (4'b0000),                                                              //      (terminated)
		.awregion               (4'b0000),                                                              //      (terminated)
		.arregion               (4'b0000),                                                              //      (terminated)
		.wuser                  (1'b0),                                                                 //      (terminated)
		.ruser                  (),                                                                     //      (terminated)
		.buser                  ()                                                                      //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) delta_timer_0_avs_agent (
		.clk                     (clk_gen_0_clk_out_clk),                                 //             clk.clk
		.reset                   (delta_timer_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (delta_timer_0_avs_agent_m0_address),                    //              m0.address
		.m0_burstcount           (delta_timer_0_avs_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (delta_timer_0_avs_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (delta_timer_0_avs_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (delta_timer_0_avs_agent_m0_lock),                       //                .lock
		.m0_readdata             (delta_timer_0_avs_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (delta_timer_0_avs_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (delta_timer_0_avs_agent_m0_read),                       //                .read
		.m0_waitrequest          (delta_timer_0_avs_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (delta_timer_0_avs_agent_m0_writedata),                  //                .writedata
		.m0_write                (delta_timer_0_avs_agent_m0_write),                      //                .write
		.rp_endofpacket          (delta_timer_0_avs_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (delta_timer_0_avs_agent_rp_ready),                      //                .ready
		.rp_valid                (delta_timer_0_avs_agent_rp_valid),                      //                .valid
		.rp_data                 (delta_timer_0_avs_agent_rp_data),                       //                .data
		.rp_startofpacket        (delta_timer_0_avs_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (delta_timer_0_avs_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (delta_timer_0_avs_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (delta_timer_0_avs_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (delta_timer_0_avs_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (delta_timer_0_avs_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (delta_timer_0_avs_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (delta_timer_0_avs_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (delta_timer_0_avs_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (delta_timer_0_avs_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (delta_timer_0_avs_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (delta_timer_0_avs_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (delta_timer_0_avs_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (delta_timer_0_avs_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (delta_timer_0_avs_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (delta_timer_0_avs_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (delta_timer_0_avs_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (delta_timer_0_avs_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (delta_timer_0_avs_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (delta_timer_0_avs_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) delta_timer_0_avs_agent_rsp_fifo (
		.clk               (clk_gen_0_clk_out_clk),                              //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (delta_timer_0_avs_agent_rf_source_data),             //        in.data
		.in_valid          (delta_timer_0_avs_agent_rf_source_valid),            //          .valid
		.in_ready          (delta_timer_0_avs_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (delta_timer_0_avs_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (delta_timer_0_avs_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (delta_timer_0_avs_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (delta_timer_0_avs_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (delta_timer_0_avs_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (delta_timer_0_avs_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (delta_timer_0_avs_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) delta_timer_0_avs_agent_rdata_fifo (
		.clk               (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (delta_timer_0_avs_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (delta_timer_0_avs_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (delta_timer_0_avs_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (delta_timer_0_avs_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (delta_timer_0_avs_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (delta_timer_0_avs_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) clk_gen_0_avs_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (clk_gen_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (clk_gen_0_avs_agent_m0_address),                    //              m0.address
		.m0_burstcount           (clk_gen_0_avs_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (clk_gen_0_avs_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (clk_gen_0_avs_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (clk_gen_0_avs_agent_m0_lock),                       //                .lock
		.m0_readdata             (clk_gen_0_avs_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (clk_gen_0_avs_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (clk_gen_0_avs_agent_m0_read),                       //                .read
		.m0_waitrequest          (clk_gen_0_avs_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (clk_gen_0_avs_agent_m0_writedata),                  //                .writedata
		.m0_write                (clk_gen_0_avs_agent_m0_write),                      //                .write
		.rp_endofpacket          (clk_gen_0_avs_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (clk_gen_0_avs_agent_rp_ready),                      //                .ready
		.rp_valid                (clk_gen_0_avs_agent_rp_valid),                      //                .valid
		.rp_data                 (clk_gen_0_avs_agent_rp_data),                       //                .data
		.rp_startofpacket        (clk_gen_0_avs_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (clk_gen_0_avs_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (clk_gen_0_avs_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (clk_gen_0_avs_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (clk_gen_0_avs_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (clk_gen_0_avs_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (clk_gen_0_avs_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (clk_gen_0_avs_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (clk_gen_0_avs_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (clk_gen_0_avs_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (clk_gen_0_avs_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (clk_gen_0_avs_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (clk_gen_0_avs_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (clk_gen_0_avs_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (clk_gen_0_avs_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (clk_gen_0_avs_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (clk_gen_0_avs_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (clk_gen_0_avs_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (clk_gen_0_avs_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (clk_gen_0_avs_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clk_gen_0_avs_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (clk_gen_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (clk_gen_0_avs_agent_rf_source_data),             //        in.data
		.in_valid          (clk_gen_0_avs_agent_rf_source_valid),            //          .valid
		.in_ready          (clk_gen_0_avs_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (clk_gen_0_avs_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (clk_gen_0_avs_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (clk_gen_0_avs_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (clk_gen_0_avs_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (clk_gen_0_avs_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (clk_gen_0_avs_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (clk_gen_0_avs_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) clk_gen_0_avs_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (clk_gen_0_avs_agent_rdata_fifo_src_data),     //        in.data
		.in_valid          (clk_gen_0_avs_agent_rdata_fifo_src_valid),    //          .valid
		.in_ready          (clk_gen_0_avs_agent_rdata_fifo_src_ready),    //          .ready
		.out_data          (clk_gen_0_avs_agent_rdata_fifo_out_data),     //       out.data
		.out_valid         (clk_gen_0_avs_agent_rdata_fifo_out_valid),    //          .valid
		.out_ready         (clk_gen_0_avs_agent_rdata_fifo_out_ready),    //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rstn_gen_0_avs_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (clk_gen_0_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (rstn_gen_0_avs_agent_m0_address),                    //              m0.address
		.m0_burstcount           (rstn_gen_0_avs_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (rstn_gen_0_avs_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (rstn_gen_0_avs_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (rstn_gen_0_avs_agent_m0_lock),                       //                .lock
		.m0_readdata             (rstn_gen_0_avs_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (rstn_gen_0_avs_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (rstn_gen_0_avs_agent_m0_read),                       //                .read
		.m0_waitrequest          (rstn_gen_0_avs_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (rstn_gen_0_avs_agent_m0_writedata),                  //                .writedata
		.m0_write                (rstn_gen_0_avs_agent_m0_write),                      //                .write
		.rp_endofpacket          (rstn_gen_0_avs_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (rstn_gen_0_avs_agent_rp_ready),                      //                .ready
		.rp_valid                (rstn_gen_0_avs_agent_rp_valid),                      //                .valid
		.rp_data                 (rstn_gen_0_avs_agent_rp_data),                       //                .data
		.rp_startofpacket        (rstn_gen_0_avs_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (rstn_gen_0_avs_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (rstn_gen_0_avs_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (rstn_gen_0_avs_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (rstn_gen_0_avs_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (rstn_gen_0_avs_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (rstn_gen_0_avs_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (rstn_gen_0_avs_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (rstn_gen_0_avs_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (rstn_gen_0_avs_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (rstn_gen_0_avs_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (rstn_gen_0_avs_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (rstn_gen_0_avs_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (rstn_gen_0_avs_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (rstn_gen_0_avs_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (rstn_gen_0_avs_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (rstn_gen_0_avs_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (rstn_gen_0_avs_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rstn_gen_0_avs_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (rstn_gen_0_avs_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rstn_gen_0_avs_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                   //       clk.clk
		.reset             (clk_gen_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (rstn_gen_0_avs_agent_rf_source_data),             //        in.data
		.in_valid          (rstn_gen_0_avs_agent_rf_source_valid),            //          .valid
		.in_ready          (rstn_gen_0_avs_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rstn_gen_0_avs_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rstn_gen_0_avs_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rstn_gen_0_avs_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rstn_gen_0_avs_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rstn_gen_0_avs_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rstn_gen_0_avs_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rstn_gen_0_avs_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rstn_gen_0_avs_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                               //       clk.clk
		.reset             (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rstn_gen_0_avs_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (rstn_gen_0_avs_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (rstn_gen_0_avs_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (rstn_gen_0_avs_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (rstn_gen_0_avs_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (rstn_gen_0_avs_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) re_det_0_avalon_slave_0_agent (
		.clk                     (clk_gen_0_clk_out_clk),                                       //             clk.clk
		.reset                   (delta_timer_0_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (re_det_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (re_det_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (re_det_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (re_det_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (re_det_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (re_det_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (re_det_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (re_det_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (re_det_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (re_det_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (re_det_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (re_det_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (re_det_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (re_det_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (re_det_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (re_det_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (re_det_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (re_det_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (re_det_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (re_det_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (re_det_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (re_det_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (re_det_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (re_det_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (re_det_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (re_det_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (re_det_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (re_det_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (re_det_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (re_det_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (re_det_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (re_det_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (re_det_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (re_det_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (re_det_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) re_det_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                    //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (re_det_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (re_det_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (re_det_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (re_det_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (re_det_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (re_det_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (re_det_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (re_det_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (re_det_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (re_det_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) re_det_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_gen_0_clk_out_clk),                              //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (re_det_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (re_det_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (re_det_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (re_det_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (re_det_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (re_det_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_startofpacket  (1'b0),                                               // (terminated)
		.in_endofpacket    (1'b0),                                               // (terminated)
		.out_startofpacket (),                                                   // (terminated)
		.out_endofpacket   (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) fifo_snk_0_avalon_slave_0_agent (
		.clk                     (clk_gen_0_clk_out_clk),                                         //             clk.clk
		.reset                   (delta_timer_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (fifo_snk_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (fifo_snk_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (fifo_snk_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (fifo_snk_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (fifo_snk_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (fifo_snk_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (fifo_snk_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (fifo_snk_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (fifo_snk_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (fifo_snk_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (fifo_snk_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (fifo_snk_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (fifo_snk_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (fifo_snk_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (fifo_snk_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (fifo_snk_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (fifo_snk_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (fifo_snk_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (fifo_snk_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (fifo_snk_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (fifo_snk_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (fifo_snk_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (fifo_snk_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (fifo_snk_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (fifo_snk_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (fifo_snk_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (fifo_snk_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_snk_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                      //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (fifo_snk_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (fifo_snk_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (fifo_snk_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (fifo_snk_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (fifo_snk_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (fifo_snk_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) fifo_snk_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dct_2d_ip_0_avalon_slave_0_agent (
		.clk                     (clk_gen_0_clk_out_clk),                                          //             clk.clk
		.reset                   (delta_timer_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (dct_2d_ip_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dct_2d_ip_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dct_2d_ip_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dct_2d_ip_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dct_2d_ip_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (dct_2d_ip_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dct_2d_ip_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dct_2d_ip_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (dct_2d_ip_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dct_2d_ip_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (dct_2d_ip_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (dct_2d_ip_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dct_2d_ip_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (dct_2d_ip_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (dct_2d_ip_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (dct_2d_ip_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dct_2d_ip_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dct_2d_ip_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dct_2d_ip_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dct_2d_ip_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dct_2d_ip_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                       //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (dct_2d_ip_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (dct_2d_ip_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (dct_2d_ip_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (dct_2d_ip_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (dct_2d_ip_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (dct_2d_ip_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                 //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_startofpacket  (1'b0),                                                  // (terminated)
		.in_endofpacket    (1'b0),                                                  // (terminated)
		.out_startofpacket (),                                                      // (terminated)
		.out_endofpacket   (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mode_selector_0_avalon_slave_0_agent (
		.clk                     (clk_gen_0_clk_out_clk),                                              //             clk.clk
		.reset                   (delta_timer_0_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (mode_selector_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (mode_selector_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (mode_selector_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (mode_selector_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (mode_selector_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (mode_selector_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (mode_selector_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (mode_selector_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (mode_selector_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (mode_selector_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (mode_selector_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (mode_selector_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (mode_selector_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (mode_selector_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (mode_selector_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (mode_selector_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (mode_selector_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (mode_selector_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (mode_selector_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (mode_selector_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (mode_selector_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (mode_selector_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (mode_selector_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (mode_selector_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (mode_selector_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (mode_selector_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (mode_selector_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mode_selector_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                           //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (mode_selector_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (mode_selector_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (mode_selector_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mode_selector_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mode_selector_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mode_selector_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mode_selector_0_avalon_slave_0_agent_rdata_fifo (
		.clk               (clk_gen_0_clk_out_clk),                                     //       clk.clk
		.reset             (delta_timer_0_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (mode_selector_0_avalon_slave_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	demo_soc_mm_interconnect_0_router router (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                    //       src.ready
		.src_valid          (router_src_valid),                                                    //          .valid
		.src_data           (router_src_data),                                                     //          .data
		.src_channel        (router_src_channel),                                                  //          .channel
		.src_startofpacket  (router_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                               //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router router_001 (
		.sink_ready         (hps_0_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (hps_0_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (hps_0_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                                       //       clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                //       src.ready
		.src_valid          (router_001_src_valid),                                                //          .valid
		.src_data           (router_001_src_data),                                                 //          .data
		.src_channel        (router_001_src_channel),                                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                           //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (delta_timer_0_avs_agent_rp_ready),                //      sink.ready
		.sink_valid         (delta_timer_0_avs_agent_rp_valid),                //          .valid
		.sink_data          (delta_timer_0_avs_agent_rp_data),                 //          .data
		.sink_startofpacket (delta_timer_0_avs_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (delta_timer_0_avs_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (clk_gen_0_avs_agent_rp_ready),                //      sink.ready
		.sink_valid         (clk_gen_0_avs_agent_rp_valid),                //          .valid
		.sink_data          (clk_gen_0_avs_agent_rp_data),                 //          .data
		.sink_startofpacket (clk_gen_0_avs_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (clk_gen_0_avs_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                        //       src.ready
		.src_valid          (router_003_src_valid),                        //          .valid
		.src_data           (router_003_src_data),                         //          .data
		.src_channel        (router_003_src_channel),                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                   //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (rstn_gen_0_avs_agent_rp_ready),               //      sink.ready
		.sink_valid         (rstn_gen_0_avs_agent_rp_valid),               //          .valid
		.sink_data          (rstn_gen_0_avs_agent_rp_data),                //          .data
		.sink_startofpacket (rstn_gen_0_avs_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (rstn_gen_0_avs_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                        //       src.ready
		.src_valid          (router_004_src_valid),                        //          .valid
		.src_data           (router_004_src_data),                         //          .data
		.src_channel        (router_004_src_channel),                      //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                   //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (re_det_0_avalon_slave_0_agent_rp_ready),          //      sink.ready
		.sink_valid         (re_det_0_avalon_slave_0_agent_rp_valid),          //          .valid
		.sink_data          (re_det_0_avalon_slave_0_agent_rp_data),           //          .data
		.sink_startofpacket (re_det_0_avalon_slave_0_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (re_det_0_avalon_slave_0_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                            //       src.ready
		.src_valid          (router_005_src_valid),                            //          .valid
		.src_data           (router_005_src_data),                             //          .data
		.src_channel        (router_005_src_channel),                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                       //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (fifo_snk_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (fifo_snk_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (fifo_snk_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (fifo_snk_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (fifo_snk_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_gen_0_clk_out_clk),                            //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (dct_2d_ip_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (dct_2d_ip_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (dct_2d_ip_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (dct_2d_ip_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (dct_2d_ip_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_gen_0_clk_out_clk),                             //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_007_src_ready),                              //       src.ready
		.src_valid          (router_007_src_valid),                              //          .valid
		.src_data           (router_007_src_data),                               //          .data
		.src_channel        (router_007_src_channel),                            //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                         //          .endofpacket
	);

	demo_soc_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (mode_selector_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (mode_selector_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (mode_selector_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (mode_selector_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mode_selector_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_gen_0_clk_out_clk),                                 //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_008_src_ready),                                  //       src.ready
		.src_valid          (router_008_src_valid),                                  //          .valid
		.src_data           (router_008_src_data),                                   //          .data
		.src_channel        (router_008_src_channel),                                //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_wr_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                    //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                    //          .valid
		.cmd_sink_data          (router_src_data),                                                     //          .data
		.cmd_sink_channel       (router_src_channel),                                                  //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                            //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                              //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                   //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                   //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                 //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                    //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (91),
		.PKT_DEST_ID_L             (89),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) hps_0_h2f_lw_axi_master_rd_limiter (
		.clk                    (clk_0_clk_clk),                                                       //       clk.clk
		.reset                  (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                //          .valid
		.cmd_sink_data          (router_001_src_data),                                                 //          .data
		.cmd_sink_channel       (router_001_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (hps_0_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) delta_timer_0_avs_burst_adapter (
		.clk                   (clk_gen_0_clk_out_clk),                                 //       cr0.clk
		.reset                 (delta_timer_0_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                     //          .ready
		.source0_valid         (delta_timer_0_avs_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (delta_timer_0_avs_burst_adapter_source0_data),          //          .data
		.source0_channel       (delta_timer_0_avs_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (delta_timer_0_avs_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (delta_timer_0_avs_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (delta_timer_0_avs_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) clk_gen_0_avs_burst_adapter (
		.clk                   (clk_0_clk_clk),                                     //       cr0.clk
		.reset                 (clk_gen_0_reset_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                             //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                              //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                           //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                       //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                             //          .ready
		.source0_valid         (clk_gen_0_avs_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (clk_gen_0_avs_burst_adapter_source0_data),          //          .data
		.source0_channel       (clk_gen_0_avs_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (clk_gen_0_avs_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (clk_gen_0_avs_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (clk_gen_0_avs_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) rstn_gen_0_avs_burst_adapter (
		.clk                   (clk_0_clk_clk),                                      //       cr0.clk
		.reset                 (clk_gen_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                               //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                              //          .ready
		.source0_valid         (rstn_gen_0_avs_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (rstn_gen_0_avs_burst_adapter_source0_data),          //          .data
		.source0_channel       (rstn_gen_0_avs_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (rstn_gen_0_avs_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (rstn_gen_0_avs_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (rstn_gen_0_avs_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) re_det_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_gen_0_clk_out_clk),                                       //       cr0.clk
		.reset                 (delta_timer_0_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                       //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                        //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                     //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                 //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                       //          .ready
		.source0_valid         (re_det_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (re_det_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (re_det_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (re_det_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (re_det_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (re_det_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) fifo_snk_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_gen_0_clk_out_clk),                                         //       cr0.clk
		.reset                 (delta_timer_0_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                         //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                          //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                       //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                   //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                         //          .ready
		.source0_valid         (fifo_snk_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (fifo_snk_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (fifo_snk_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (fifo_snk_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (fifo_snk_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (fifo_snk_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) dct_2d_ip_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_gen_0_clk_out_clk),                                          //       cr0.clk
		.reset                 (delta_timer_0_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                          //          .ready
		.source0_valid         (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (dct_2d_ip_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (7),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) mode_selector_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_gen_0_clk_out_clk),                                              //       cr0.clk
		.reset                 (delta_timer_0_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                              //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                               //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                            //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                        //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                              //          .ready
		.source0_valid         (mode_selector_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (mode_selector_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (mode_selector_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (mode_selector_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (mode_selector_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (mode_selector_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	demo_soc_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                //           .valid
		.src0_data          (cmd_demux_src0_data),                                                 //           .data
		.src0_channel       (cmd_demux_src0_channel),                                              //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                        //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                          //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                //           .valid
		.src1_data          (cmd_demux_src1_data),                                                 //           .data
		.src1_channel       (cmd_demux_src1_channel),                                              //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                        //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                          //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                //           .valid
		.src2_data          (cmd_demux_src2_data),                                                 //           .data
		.src2_channel       (cmd_demux_src2_channel),                                              //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                        //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                          //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                //           .valid
		.src3_data          (cmd_demux_src3_data),                                                 //           .data
		.src3_channel       (cmd_demux_src3_channel),                                              //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                        //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                          //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                //           .valid
		.src4_data          (cmd_demux_src4_data),                                                 //           .data
		.src4_channel       (cmd_demux_src4_channel),                                              //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                        //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                          //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                //           .valid
		.src5_data          (cmd_demux_src5_data),                                                 //           .data
		.src5_channel       (cmd_demux_src5_channel),                                              //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                        //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                                          //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                                                //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                                                //           .valid
		.src6_data          (cmd_demux_src6_data),                                                 //           .data
		.src6_channel       (cmd_demux_src6_channel),                                              //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                                        //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                                           //           .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                                       //        clk.clk
		.reset              (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel       (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data          (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket   (hps_0_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid         (hps_0_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready         (cmd_demux_001_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_001_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_001_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_001_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_001_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                                      //           .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                                            //       src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                                            //           .valid
		.src2_data          (cmd_demux_001_src2_data),                                             //           .data
		.src2_channel       (cmd_demux_001_src2_channel),                                          //           .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                                      //           .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                                            //       src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                                            //           .valid
		.src3_data          (cmd_demux_001_src3_data),                                             //           .data
		.src3_channel       (cmd_demux_001_src3_channel),                                          //           .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                                      //           .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                                            //       src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                                            //           .valid
		.src4_data          (cmd_demux_001_src4_data),                                             //           .data
		.src4_channel       (cmd_demux_001_src4_channel),                                          //           .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket),                                      //           .endofpacket
		.src5_ready         (cmd_demux_001_src5_ready),                                            //       src5.ready
		.src5_valid         (cmd_demux_001_src5_valid),                                            //           .valid
		.src5_data          (cmd_demux_001_src5_data),                                             //           .data
		.src5_channel       (cmd_demux_001_src5_channel),                                          //           .channel
		.src5_startofpacket (cmd_demux_001_src5_startofpacket),                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_001_src5_endofpacket),                                      //           .endofpacket
		.src6_ready         (cmd_demux_001_src6_ready),                                            //       src6.ready
		.src6_valid         (cmd_demux_001_src6_valid),                                            //           .valid
		.src6_data          (cmd_demux_001_src6_data),                                             //           .data
		.src6_channel       (cmd_demux_001_src6_channel),                                          //           .channel
		.src6_startofpacket (cmd_demux_001_src6_startofpacket),                                    //           .startofpacket
		.src6_endofpacket   (cmd_demux_001_src6_endofpacket)                                       //           .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset               (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                               //          .valid
		.src_data            (cmd_mux_src_data),                                //          .data
		.src_channel         (cmd_mux_src_channel),                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                         //          .endofpacket
		.sink0_ready         (crosser_out_ready),                               //     sink0.ready
		.sink0_valid         (crosser_out_valid),                               //          .valid
		.sink0_channel       (crosser_out_channel),                             //          .channel
		.sink0_data          (crosser_out_data),                                //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                         //          .endofpacket
		.sink1_ready         (crosser_005_out_ready),                           //     sink1.ready
		.sink1_valid         (crosser_005_out_valid),                           //          .valid
		.sink1_channel       (crosser_005_out_channel),                         //          .channel
		.sink1_data          (crosser_005_out_data),                            //          .data
		.sink1_startofpacket (crosser_005_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (crosser_005_out_endofpacket)                      //          .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                               //       clk.clk
		.reset               (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)               //          .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset               (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                           //          .valid
		.src_data            (cmd_mux_003_src_data),                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                           //          .valid
		.sink0_channel       (crosser_001_out_channel),                         //          .channel
		.sink0_data          (crosser_001_out_data),                            //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket),                     //          .endofpacket
		.sink1_ready         (crosser_006_out_ready),                           //     sink1.ready
		.sink1_valid         (crosser_006_out_valid),                           //          .valid
		.sink1_channel       (crosser_006_out_channel),                         //          .channel
		.sink1_data          (crosser_006_out_data),                            //          .data
		.sink1_startofpacket (crosser_006_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (crosser_006_out_endofpacket)                      //          .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset               (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                           //          .valid
		.src_data            (cmd_mux_004_src_data),                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                           //          .valid
		.sink0_channel       (crosser_002_out_channel),                         //          .channel
		.sink0_data          (crosser_002_out_data),                            //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket),                     //          .endofpacket
		.sink1_ready         (crosser_007_out_ready),                           //     sink1.ready
		.sink1_valid         (crosser_007_out_valid),                           //          .valid
		.sink1_channel       (crosser_007_out_channel),                         //          .channel
		.sink1_data          (crosser_007_out_data),                            //          .data
		.sink1_startofpacket (crosser_007_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (crosser_007_out_endofpacket)                      //          .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset               (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                           //          .valid
		.src_data            (cmd_mux_005_src_data),                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                           //          .valid
		.sink0_channel       (crosser_003_out_channel),                         //          .channel
		.sink0_data          (crosser_003_out_data),                            //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket),                     //          .endofpacket
		.sink1_ready         (crosser_008_out_ready),                           //     sink1.ready
		.sink1_valid         (crosser_008_out_valid),                           //          .valid
		.sink1_channel       (crosser_008_out_channel),                         //          .channel
		.sink1_data          (crosser_008_out_data),                            //          .data
		.sink1_startofpacket (crosser_008_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (crosser_008_out_endofpacket)                      //          .endofpacket
	);

	demo_soc_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset               (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                           //          .valid
		.src_data            (cmd_mux_006_src_data),                            //          .data
		.src_channel         (cmd_mux_006_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                           //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                           //          .valid
		.sink0_channel       (crosser_004_out_channel),                         //          .channel
		.sink0_data          (crosser_004_out_data),                            //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket),                     //          .endofpacket
		.sink1_ready         (crosser_009_out_ready),                           //     sink1.ready
		.sink1_valid         (crosser_009_out_valid),                           //          .valid
		.sink1_channel       (crosser_009_out_channel),                         //          .channel
		.sink1_data          (crosser_009_out_data),                            //          .data
		.sink1_startofpacket (crosser_009_out_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (crosser_009_out_endofpacket)                      //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                            //      sink.ready
		.sink_channel       (router_002_src_channel),                          //          .channel
		.sink_data          (router_002_src_data),                             //          .data
		.sink_startofpacket (router_002_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_002_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_src0_data),                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                            //          .valid
		.src1_data          (rsp_demux_src1_data),                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                       //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)               //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                               //       clk.clk
		.reset              (clk_gen_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //      sink.ready
		.sink_channel       (router_004_src_channel),                      //          .channel
		.sink_data          (router_004_src_data),                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                            //      sink.ready
		.sink_channel       (router_005_src_channel),                          //          .channel
		.sink_data          (router_005_src_data),                             //          .data
		.sink_startofpacket (router_005_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_005_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_003_src0_data),                         //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_003_src1_data),                         //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                   //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                            //      sink.ready
		.sink_channel       (router_006_src_channel),                          //          .channel
		.sink_data          (router_006_src_data),                             //          .data
		.sink_startofpacket (router_006_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_006_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_004_src0_data),                         //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_004_src1_data),                         //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                   //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                            //      sink.ready
		.sink_channel       (router_007_src_channel),                          //          .channel
		.sink_data          (router_007_src_data),                             //          .data
		.sink_startofpacket (router_007_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_007_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_005_src0_data),                         //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_005_src1_data),                         //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)                   //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_gen_0_clk_out_clk),                           //       clk.clk
		.reset              (delta_timer_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                            //      sink.ready
		.sink_channel       (router_008_src_channel),                          //          .channel
		.sink_data          (router_008_src_data),                             //          .data
		.sink_startofpacket (router_008_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_008_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_006_src0_data),                         //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_006_src1_data),                         //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                   //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                   //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                   //          .valid
		.src_data            (rsp_mux_src_data),                                                    //          .data
		.src_channel         (rsp_mux_src_channel),                                                 //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                             //          .endofpacket
		.sink0_ready         (crosser_010_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_010_out_valid),                                               //          .valid
		.sink0_channel       (crosser_010_out_channel),                                             //          .channel
		.sink0_data          (crosser_010_out_data),                                                //          .data
		.sink0_startofpacket (crosser_010_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_010_out_endofpacket),                                         //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                                      //          .endofpacket
		.sink3_ready         (crosser_012_out_ready),                                               //     sink3.ready
		.sink3_valid         (crosser_012_out_valid),                                               //          .valid
		.sink3_channel       (crosser_012_out_channel),                                             //          .channel
		.sink3_data          (crosser_012_out_data),                                                //          .data
		.sink3_startofpacket (crosser_012_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (crosser_012_out_endofpacket),                                         //          .endofpacket
		.sink4_ready         (crosser_014_out_ready),                                               //     sink4.ready
		.sink4_valid         (crosser_014_out_valid),                                               //          .valid
		.sink4_channel       (crosser_014_out_channel),                                             //          .channel
		.sink4_data          (crosser_014_out_data),                                                //          .data
		.sink4_startofpacket (crosser_014_out_startofpacket),                                       //          .startofpacket
		.sink4_endofpacket   (crosser_014_out_endofpacket),                                         //          .endofpacket
		.sink5_ready         (crosser_016_out_ready),                                               //     sink5.ready
		.sink5_valid         (crosser_016_out_valid),                                               //          .valid
		.sink5_channel       (crosser_016_out_channel),                                             //          .channel
		.sink5_data          (crosser_016_out_data),                                                //          .data
		.sink5_startofpacket (crosser_016_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket   (crosser_016_out_endofpacket),                                         //          .endofpacket
		.sink6_ready         (crosser_018_out_ready),                                               //     sink6.ready
		.sink6_valid         (crosser_018_out_valid),                                               //          .valid
		.sink6_channel       (crosser_018_out_channel),                                             //          .channel
		.sink6_data          (crosser_018_out_data),                                                //          .data
		.sink6_startofpacket (crosser_018_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket   (crosser_018_out_endofpacket)                                          //          .endofpacket
	);

	demo_soc_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                                       //       clk.clk
		.reset               (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                               //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                               //          .valid
		.src_data            (rsp_mux_001_src_data),                                                //          .data
		.src_channel         (rsp_mux_001_src_channel),                                             //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (crosser_011_out_ready),                                               //     sink0.ready
		.sink0_valid         (crosser_011_out_valid),                                               //          .valid
		.sink0_channel       (crosser_011_out_channel),                                             //          .channel
		.sink0_data          (crosser_011_out_data),                                                //          .data
		.sink0_startofpacket (crosser_011_out_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket   (crosser_011_out_endofpacket),                                         //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                            //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                            //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                          //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                             //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                                    //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                                      //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                            //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                            //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                          //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                             //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                                    //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                                      //          .endofpacket
		.sink3_ready         (crosser_013_out_ready),                                               //     sink3.ready
		.sink3_valid         (crosser_013_out_valid),                                               //          .valid
		.sink3_channel       (crosser_013_out_channel),                                             //          .channel
		.sink3_data          (crosser_013_out_data),                                                //          .data
		.sink3_startofpacket (crosser_013_out_startofpacket),                                       //          .startofpacket
		.sink3_endofpacket   (crosser_013_out_endofpacket),                                         //          .endofpacket
		.sink4_ready         (crosser_015_out_ready),                                               //     sink4.ready
		.sink4_valid         (crosser_015_out_valid),                                               //          .valid
		.sink4_channel       (crosser_015_out_channel),                                             //          .channel
		.sink4_data          (crosser_015_out_data),                                                //          .data
		.sink4_startofpacket (crosser_015_out_startofpacket),                                       //          .startofpacket
		.sink4_endofpacket   (crosser_015_out_endofpacket),                                         //          .endofpacket
		.sink5_ready         (crosser_017_out_ready),                                               //     sink5.ready
		.sink5_valid         (crosser_017_out_valid),                                               //          .valid
		.sink5_channel       (crosser_017_out_channel),                                             //          .channel
		.sink5_data          (crosser_017_out_data),                                                //          .data
		.sink5_startofpacket (crosser_017_out_startofpacket),                                       //          .startofpacket
		.sink5_endofpacket   (crosser_017_out_endofpacket),                                         //          .endofpacket
		.sink6_ready         (crosser_019_out_ready),                                               //     sink6.ready
		.sink6_valid         (crosser_019_out_valid),                                               //          .valid
		.sink6_channel       (crosser_019_out_channel),                                             //          .channel
		.sink6_data          (crosser_019_out_data),                                                //          .data
		.sink6_startofpacket (crosser_019_out_startofpacket),                                       //          .startofpacket
		.sink6_endofpacket   (crosser_019_out_endofpacket)                                          //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                              //              .channel
		.in_data           (cmd_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_out_ready),                                                   //           out.ready
		.out_valid         (crosser_out_valid),                                                   //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                           //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                             //              .endofpacket
		.out_channel       (crosser_out_channel),                                                 //              .channel
		.out_data          (crosser_out_data),                                                    //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                              //              .channel
		.in_data           (cmd_demux_src3_data),                                                 //              .data
		.out_ready         (crosser_001_out_ready),                                               //           out.ready
		.out_valid         (crosser_001_out_valid),                                               //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                             //              .channel
		.out_data          (crosser_001_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                              //              .channel
		.in_data           (cmd_demux_src4_data),                                                 //              .data
		.out_ready         (crosser_002_out_ready),                                               //           out.ready
		.out_valid         (crosser_002_out_valid),                                               //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                             //              .channel
		.out_data          (crosser_002_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                                              //              .channel
		.in_data           (cmd_demux_src5_data),                                                 //              .data
		.out_ready         (crosser_003_out_ready),                                               //           out.ready
		.out_valid         (crosser_003_out_valid),                                               //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                             //              .channel
		.out_data          (crosser_003_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                                //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                                //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                          //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                                              //              .channel
		.in_data           (cmd_demux_src6_data),                                                 //              .data
		.out_ready         (crosser_004_out_ready),                                               //           out.ready
		.out_valid         (crosser_004_out_valid),                                               //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                             //              .channel
		.out_data          (crosser_004_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src0_data),                                             //              .data
		.out_ready         (crosser_005_out_ready),                                               //           out.ready
		.out_valid         (crosser_005_out_valid),                                               //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                             //              .channel
		.out_data          (crosser_005_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src3_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src3_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src3_data),                                             //              .data
		.out_ready         (crosser_006_out_ready),                                               //           out.ready
		.out_valid         (crosser_006_out_valid),                                               //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                             //              .channel
		.out_data          (crosser_006_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src4_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src4_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src4_data),                                             //              .data
		.out_ready         (crosser_007_out_ready),                                               //           out.ready
		.out_valid         (crosser_007_out_valid),                                               //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_007_out_channel),                                             //              .channel
		.out_data          (crosser_007_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_008 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src5_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src5_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src5_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src5_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src5_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src5_data),                                             //              .data
		.out_ready         (crosser_008_out_ready),                                               //           out.ready
		.out_valid         (crosser_008_out_valid),                                               //              .valid
		.out_startofpacket (crosser_008_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_008_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_008_out_channel),                                             //              .channel
		.out_data          (crosser_008_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_009 (
		.in_clk            (clk_0_clk_clk),                                                       //        in_clk.clk
		.in_reset          (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_gen_0_clk_out_clk),                                               //       out_clk.clk
		.out_reset         (delta_timer_0_reset_reset_bridge_in_reset_reset),                     // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                                            //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                                            //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                                      //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                                          //              .channel
		.in_data           (cmd_demux_001_src6_data),                                             //              .data
		.out_ready         (crosser_009_out_ready),                                               //           out.ready
		.out_valid         (crosser_009_out_valid),                                               //              .valid
		.out_startofpacket (crosser_009_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_009_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_009_out_channel),                                             //              .channel
		.out_data          (crosser_009_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_010 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                                //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                                //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                          //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                              //              .channel
		.in_data           (rsp_demux_src0_data),                                                 //              .data
		.out_ready         (crosser_010_out_ready),                                               //           out.ready
		.out_valid         (crosser_010_out_valid),                                               //              .valid
		.out_startofpacket (crosser_010_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_010_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_010_out_channel),                                             //              .channel
		.out_data          (crosser_010_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_011 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                                //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                                //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                                        //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                          //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                              //              .channel
		.in_data           (rsp_demux_src1_data),                                                 //              .data
		.out_ready         (crosser_011_out_ready),                                               //           out.ready
		.out_valid         (crosser_011_out_valid),                                               //              .valid
		.out_startofpacket (crosser_011_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_011_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_011_out_channel),                                             //              .channel
		.out_data          (crosser_011_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_012 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src0_data),                                             //              .data
		.out_ready         (crosser_012_out_ready),                                               //           out.ready
		.out_valid         (crosser_012_out_valid),                                               //              .valid
		.out_startofpacket (crosser_012_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_012_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_012_out_channel),                                             //              .channel
		.out_data          (crosser_012_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_013 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_003_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_003_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_003_src1_data),                                             //              .data
		.out_ready         (crosser_013_out_ready),                                               //           out.ready
		.out_valid         (crosser_013_out_valid),                                               //              .valid
		.out_startofpacket (crosser_013_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_013_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_013_out_channel),                                             //              .channel
		.out_data          (crosser_013_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_014 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_004_src0_data),                                             //              .data
		.out_ready         (crosser_014_out_ready),                                               //           out.ready
		.out_valid         (crosser_014_out_valid),                                               //              .valid
		.out_startofpacket (crosser_014_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_014_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_014_out_channel),                                             //              .channel
		.out_data          (crosser_014_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_015 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_004_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_004_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_004_src1_data),                                             //              .data
		.out_ready         (crosser_015_out_ready),                                               //           out.ready
		.out_valid         (crosser_015_out_valid),                                               //              .valid
		.out_startofpacket (crosser_015_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_015_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_015_out_channel),                                             //              .channel
		.out_data          (crosser_015_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_016 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_005_src0_data),                                             //              .data
		.out_ready         (crosser_016_out_ready),                                               //           out.ready
		.out_valid         (crosser_016_out_valid),                                               //              .valid
		.out_startofpacket (crosser_016_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_016_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_016_out_channel),                                             //              .channel
		.out_data          (crosser_016_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_017 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_005_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_005_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_005_src1_data),                                             //              .data
		.out_ready         (crosser_017_out_ready),                                               //           out.ready
		.out_valid         (crosser_017_out_valid),                                               //              .valid
		.out_startofpacket (crosser_017_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_017_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_017_out_channel),                                             //              .channel
		.out_data          (crosser_017_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_018 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src0_data),                                             //              .data
		.out_ready         (crosser_018_out_ready),                                               //           out.ready
		.out_valid         (crosser_018_out_valid),                                               //              .valid
		.out_startofpacket (crosser_018_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_018_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_018_out_channel),                                             //              .channel
		.out_data          (crosser_018_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (116),
		.BITS_PER_SYMBOL     (116),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (7),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_019 (
		.in_clk            (clk_gen_0_clk_out_clk),                                               //        in_clk.clk
		.in_reset          (delta_timer_0_reset_reset_bridge_in_reset_reset),                     //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                                       //       out_clk.clk
		.out_reset         (hps_0_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src1_ready),                                            //            in.ready
		.in_valid          (rsp_demux_006_src1_valid),                                            //              .valid
		.in_startofpacket  (rsp_demux_006_src1_startofpacket),                                    //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src1_endofpacket),                                      //              .endofpacket
		.in_channel        (rsp_demux_006_src1_channel),                                          //              .channel
		.in_data           (rsp_demux_006_src1_data),                                             //              .data
		.out_ready         (crosser_019_out_ready),                                               //           out.ready
		.out_valid         (crosser_019_out_valid),                                               //              .valid
		.out_startofpacket (crosser_019_out_startofpacket),                                       //              .startofpacket
		.out_endofpacket   (crosser_019_out_endofpacket),                                         //              .endofpacket
		.out_channel       (crosser_019_out_channel),                                             //              .channel
		.out_data          (crosser_019_out_data),                                                //              .data
		.in_empty          (1'b0),                                                                //   (terminated)
		.in_error          (1'b0),                                                                //   (terminated)
		.out_empty         (),                                                                    //   (terminated)
		.out_error         ()                                                                     //   (terminated)
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_gen_0_clk_out_clk),                           // in_clk_0.clk
		.in_rst_0_reset (delta_timer_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (delta_timer_0_avs_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (delta_timer_0_avs_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (delta_timer_0_avs_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                    //         .error
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (clk_gen_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (clk_gen_0_avs_agent_rdata_fifo_out_data),     //     in_0.data
		.in_0_valid     (clk_gen_0_avs_agent_rdata_fifo_out_valid),    //         .valid
		.in_0_ready     (clk_gen_0_avs_agent_rdata_fifo_out_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)            //         .error
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                               // in_clk_0.clk
		.in_rst_0_reset (clk_gen_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rstn_gen_0_avs_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (rstn_gen_0_avs_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (rstn_gen_0_avs_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)            //         .error
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_gen_0_clk_out_clk),                              // in_clk_0.clk
		.in_rst_0_reset (delta_timer_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (re_det_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (re_det_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (re_det_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                   //         .error
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_gen_0_clk_out_clk),                                // in_clk_0.clk
		.in_rst_0_reset (delta_timer_0_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (fifo_snk_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_gen_0_clk_out_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (delta_timer_0_reset_reset_bridge_in_reset_reset),       // in_rst_0.reset
		.in_0_data      (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (dct_2d_ip_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                      //         .error
	);

	demo_soc_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_gen_0_clk_out_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (delta_timer_0_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (mode_selector_0_avalon_slave_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                          //         .error
	);

endmodule
